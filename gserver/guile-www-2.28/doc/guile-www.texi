\input texinfo  @c -*-texinfo-*-
@c %**start of header
@setfilename guile-www.info
@settitle @code{Guile-WWW} Modules Reference
@ifinfo
@paragraphindent 0
@end ifinfo
@c %**end of header
@c @setchapternewpage odd

@syncodeindex vr fn

@c ---------------------------------------------------------------------------
@dircategory Guile modules
@direntry
* Guile-WWW: (guile-www).         Scheme modules for WWW interaction.
@end direntry

@c ---------------------------------------------------------------------------
@include version.texi

@c ---------------------------------------------------------------------------
@ifinfo
This file is the Guile-WWW Modules Reference

Copyright @copyright{} 2007, 2008, 2009, 2010 Thien-Thi Nguyen

Copyright @copyright{} 2001, 2002, 2003, 2004, 2005,
   2006, 2007 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and
print the results, provided the printed document carries a copying
permission notice identical to this one except for the removal of this
paragraph (this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
sections entitled ``Copying'' and ``GNU General Public License'' are
included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the Free Software Foundation.

@end ifinfo
@titlepage
@sp 10
@comment The title is printed in a large font.
@center @titlefont{Guile-WWW Modules Reference}

@c ---------------------------------------------------------------------------
@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2007, 2008, 2009, 2010 Thien-Thi Nguyen

Copyright @copyright{} 2001, 2002, 2003, 2004, 2005,
   2006, 2007 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice are
preserved on all copies.

Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the sections entitled ``Copying'' and ``GNU General Public
License'' are included exactly as in the original, and provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Free Software Foundation.

@end titlepage

@contents

@c ---------------------------------------------------------------------------
@node Top
@top The (www *) Modules

Guile-WWW is a set of Guile Scheme modules providing support for navigating
HTTP connections, parsing URLs, handling CGI operations, and fetching WWW
resources.  This document corresponds to Guile-WWW @value{VERSION}.

@menu
Basic -- (www *)
* http::                Navigate HTTP connections.
* url::                 Parse URLs, including decoding.
* cgi::                 Write CGI scripts painlessly.
* main::                Fetch world-wide-web resources.
* url-coding::          URL decode and encode, only.
* utcsec::              Seconds after epoch, UTC.

Server Utilities -- (www server-utils *)
* big-dishing-loop::    Customizable listener and dispatch.
* parse-request::       Read HTTP first line and headers.
* form-2-form::         Unflatten POSTed form data.
* filesystem::          Work with the local filesystem.
* cgi-prep::            Prepare environment for CGI handoff.
* cookies::             Handling bits of client-side state.
* answer::              HTTP connection handling and responses.
* log::                 Love notes to other programs.

* modlisp::             Hiding behind Apache.

Data -- (www data *)
* http-status::         The dreaded 404 lives here.
* mime-types::          Map filename extension to MIME type(s).


* Procedure Index::
@end menu

@c ---------------------------------------------------------------------------
@c ---------------------------------------------------------------------------
@node         http
@chapter (www http)

The @code{(www http)} module includes procedures for high-level HTTP
operation, low-level HTTP message object access, and common messages.

@section High-Level HTTP Operation

@c @twerpdoc (http:connect)
@c ../source/http.doc
@deffn {Procedure} http:connect proto addrfam address [address-rest...]
Return a TCP stream socket connected to the location specified by
protocol @var{proto}, @var{addrfam} and @var{address}.  @var{proto}
is @code{PF_INET} or @code{PF_UNIX}, and the other args take
corresponding forms:

@table @code
@item PF_INET
@code{(AF_INET @var{ipaddr} @var{portno})}, where @var{ipaddr} is
an integer.  Use @code{(car (hostent:addr-list (gethost @var{host})))}
to compute the ipaddr of @var{host} (a string).

@item PF_UNIX
@code{(AF_UNIX @var{filename})}, made, for example, by@*
@code{(list AF_UNIX "/tmp/foo-control")}.
@end table

Note that @code{PF_foo} and @code{AF_foo} are names of variables
that have constant values, not symbols.
@end deffn
@c @twerpdoc (http:open)
@c ../source/http.doc
@deffn {Procedure} http:open host [port]
Return an HTTP connection (a socket) to @var{host} (a string) on TCP
port @var{port} (default 80 if unspecified).
@end deffn
@c @twerpdoc (http:request)
@c ../source/http.doc
@deffn {Procedure} http:request method url [headers [body]]
Submit an HTTP request using @var{method} and @var{url}, wait
for a response, and return the response as an HTTP message object.

@var{method} is the name of some HTTP method, e.g. "GET" or "POST".
@var{url} is a url object returned by @code{url:parse}.  Optional
args @var{headers} and @var{body} are lists of strings that comprise
the lines of an HTTP message.  The strings should not end with
@samp{CR} or @samp{LF} or @samp{CRLF}; @code{http:request} handles
that.  Also, the Content-Length header and Host header are calculated
automatically and should not be supplied.  Here are two examples:

@example
(http:request "get" parsed-url
  (list "User-Agent: Anonymous/0.1"
        "Content-Type: text/plain"))

(http:request "post" parsed-url
  (list "User-Agent: Fred/0.1"
        "Content-Type: application/x-www-form-urlencoded")
  (list (string-append "search=Gosper"
                       "&case=no"
                       "&max_hits=50")))
@end example

As a special case (demonstrated in the second example above), when
Content-Type is @code{application/x-www-form-urlencoded} and there is
only one line in the body, the final @samp{CRLF} is omitted and the
Content-Length is adjusted accordingly.
@end deffn

@section Low-Level HTTP Message Object Access

@c @twerpdoc (http:message-version)
@c ../source/http.doc
@deffn {Procedure} http:message-version msg
Return the HTTP version in use in HTTP message @var{msg}.
@end deffn
@c @twerpdoc (http:message-status-code)
@c ../source/http.doc
@deffn {Procedure} http:message-status-code msg
Return the status code returned in HTTP message @var{msg}.
@end deffn
@c @twerpdoc (http:message-status-text)
@c ../source/http.doc
@deffn {Procedure} http:message-status-text msg
Return the text of the status line from HTTP message @var{msg}.
@end deffn
@c @twerpdoc (http:message-status-ok?)
@c ../source/http.doc
@deffn {Procedure} http:message-status-ok? msg
Return @code{#t} iff status code of @var{msg}
indicates a successful request.
@end deffn
@c @twerpdoc (http:status-ok?)
@c ../source/http.doc
@deffn {Procedure} http:status-ok? status
Return @code{#t} iff @var{status} (a string) begins with "2".
@end deffn
@c @twerpdoc (http:message-body)
@c ../source/http.doc
@deffn {Procedure} http:message-body msg
Return the body of the HTTP message @var{msg}.
@end deffn

An HTTP message header is represented by a pair.  The @sc{car} is a
symbol representing the header name, and the @sc{cdr} is a string containing
the header text.  E.g.:

@example
'((date . "Thu, 29 May 1997 23:48:27 GMT")
  (server . "NCSA/1.5.1")
  (last-modified . "Tue, 06 May 1997 18:32:03 GMT")
  (content-type . "text/html")
  (content-length . "8097"))
@end example

@noindent
Note: these symbols are all lowercase, although the original headers may be
mixed-case.  Clients using this library should keep this in mind, since Guile
symbols are case-sensitive.

@c @twerpdoc (http:message-headers)
@c ../source/http.doc
@deffn {Procedure} http:message-headers msg
Return a list of the headers from HTTP message @var{msg}.
@end deffn
@c @twerpdoc (http:message-header)
@c ../source/http.doc
@deffn {Procedure} http:message-header header msg
Return the header field named @var{header} from HTTP message @var{msg},
or @code{#f} if no such header is present in the message.
@end deffn

@section Common Messages

@c @twerpdoc (http:head)
@c ../source/http.doc
@deffn {Procedure} http:head url
Submit an http request using the @code{HEAD} method on the @var{url}.
The @code{Host} header is automatically included.
@end deffn
@c @twerpdoc (http:get)
@c ../source/http.doc
@deffn {Procedure} http:get url
Submit an http request using the @code{GET} method on the @var{url}.
The @code{Host} header is automatically included.
@end deffn
@c @twerpdoc (http:post-form)
@c ../source/http.doc
@deffn {Procedure} http:post-form url extra-headers fields
Submit an http request using the @code{POST} method on the @var{url}.
@var{extra-headers} is a list of extra headers, each a string of form
"@var{name}: @var{value} @dots{}".

The "Content-Type" and "Host" headers are sent automatically and do
not need to be specified.  @var{fields} is a list of elements of the
form @code{(@var{fkey} . @var{fvalue})}, where @var{fkey} is a symbol
and @var{fvalue} is normally a string.

@var{fvalue} can also be a list of file-upload specifications, each
of which has the form @code{(@var{source} @var{name} @var{mime-type}
@var{transfer-encoding})}.  @var{source} can be a string or a thunk
that returns a string.

The rest of the elements are strings or symbols: @var{name} is the
filename (only the non-directory part is used); @var{mime-type} is a
type/subtype pair such as "image/jpeg", or @code{#f} to mean
"text/plain".  @var{transfer-encoding} is one of the tokens specified
by RFC 1521, or @code{#f} to mean "binary".  File-upload spec
elements with invalid types result in a "bad upload spec" error prior
to the http request.

Note that @var{source} is used directly without further processing;
it is the caller's responsibility to ensure that the MIME type and
transfer encoding specified describe @var{source} accurately.
@end deffn

@c ---------------------------------------------------------------------------
@node         url
@chapter (www url)

The @code{(www url)} module provides procedures for high-level url
object conversion, low-level url object construction and access,
and character decoding/encoding.

@section High-Level URL Object Conversion

@c @twerpdoc (url:parse)
@c ../source/url.doc
@deffn {Procedure} url:parse string
Parse @var{string} and return a url object, with one of the
following "schemes": HTTP, FTP, mailto, unknown.
@end deffn
@c @twerpdoc (url:unparse)
@c ../source/url.doc
@deffn {Procedure} url:unparse url
Return the @var{url} object formatted as a string.
Note: The username portion is not included!
@end deffn

@section Low-Level URL Object Construction

@c @twerpdoc (url:make)
@c ../source/url.doc
@deffn {Procedure} url:make scheme [args...]
Construct a url object with specific @var{scheme} and other @var{args}.
The number and meaning of @var{args} depends on the @var{scheme}.
@end deffn
@c @twerpdoc (url:make-http)
@c ../source/url.doc
@deffn {Procedure} url:make-http host port path
Construct a HTTP-specific url object with
@var{host}, @var{port} and @var{path} portions.
@end deffn
@c @twerpdoc (url:make-ftp)
@c ../source/url.doc
@deffn {Procedure} url:make-ftp user host port path
Construct a FTP-specific url object with
@var{user}, @var{host}, @var{port} and @var{path} portions.
@end deffn
@c @twerpdoc (url:make-mailto)
@c ../source/url.doc
@deffn {Procedure} url:make-mailto address
Construct a mailto-specific url object with
an @var{address} portion.
@end deffn

@section Low-Level URL Object Access

@c @twerpdoc (url:scheme)
@c ../source/url.doc
@deffn {Procedure} url:scheme url
Extract and return the "scheme" portion of a @var{url} object.
@code{url:scheme} is an unfortunate term, but it is the technical
name for that portion of the URL according to RFC 1738.  Sigh.
@end deffn
@c @twerpdoc (url:address)
@c ../source/url.doc
@deffn {Procedure} url:address url
Extract and return the "address" portion of the @var{url} object.
@end deffn
@c @twerpdoc (url:unknown)
@c ../source/url.doc
@deffn {Procedure} url:unknown url
Extract and return the "unknown" portion of the @var{url} object.
@end deffn
@c @twerpdoc (url:user)
@c ../source/url.doc
@deffn {Procedure} url:user url
Extract and return the "user" portion of the @var{url} object.
@end deffn
@c @twerpdoc (url:host)
@c ../source/url.doc
@deffn {Procedure} url:host url
Extract and return the "host" portion of the @var{url} object.
@end deffn
@c @twerpdoc (url:port)
@c ../source/url.doc
@deffn {Procedure} url:port url
Extract and return the "port" portion of the @var{url} object.
@end deffn
@c @twerpdoc (url:path)
@c ../source/url.doc
@deffn {Procedure} url:path url
Extract and return the "path" portion of the @var{url} object.
@end deffn

@section Character Decoding/Encoding

@c @twerpdoc (url:decode)
@c ../source/url.doc
@deffn {Procedure} url:decode str
Re-export @code{url-coding:decode}.  @xref{url-coding}.
@end deffn
@c @twerpdoc (url:encode)
@c ../source/url.doc
@deffn {Procedure} url:encode str reserved-chars
Re-export @code{url-coding:encode}.  @xref{url-coding}.
@end deffn

@c ---------------------------------------------------------------------------
@node         cgi
@chapter (www cgi)

The @code{(www cgi)} module provides procedures to support painlessly
writing Common Gateway Interface scripts to process interactive forms.
These scripts typically follow the following steps: initialization and
discovery, data transfer in, data transfer out.

@section Initialization and Discovery

@c @twerpdoc (cgi:init)
@c ../source/cgi.doc
@deffn {Procedure} cgi:init [opts...]
(Re-)initialize internal data structures.  This must be called before
calling any other @samp{cgi:foo} procedure.  For FastCGI, call this
``inside the loop'' (that is, for each CGI invocation).

@var{opts} are zero or more symbols that configure the module.

@table @code
@item uploads-lazy
This controls how uploaded files, as per @code{cgi:uploads}
and @code{cgi:upload}, are represented.
@end table

Unrecognized options are ignored.
@end deffn
@c @twerpdoc (cgi:form-data?)
@c ../source/cgi.doc
@deffn {Procedure} cgi:form-data?
Return @code{#t} iff there is form data available.
@end deffn
@c @twerpdoc (cgi:names)
@c ../source/cgi.doc
@deffn {Procedure} cgi:names
Return a list of variable names in the form.  The order of the
list is the same as that found in the form for the first occurance
of each variable and each variable appears at most once.  For example,
if the form has variables ordered @code{a b a c d b e}, then the
returned list would have order @code{a b c d e}.
@end deffn
@c @twerpdoc (cgi:cookie-names)
@c ../source/cgi.doc
@deffn {Procedure} cgi:cookie-names
Return a list of cookie names.
@end deffn

@section Data Transfer In

@c @twerpdoc (cgi:getenv)
@c ../source/cgi.doc
@deffn {Procedure} cgi:getenv key
Return the value of the environment variable associated with @var{key}, a
symbol.  Unless otherwise specified below, the return value is a (possibly
massaged, possibly empty) string.  The following keys are recognized:

@itemize
@item server-software-type
@item server-software-version
@item server-hostname
@item gateway-interface
@item server-protocol-name
@item server-protocol-version
@item server-port (integer)
@item request-method
@item path-info
@item path-translated
@item script-name
@item query-string
@item remote-host
@item remote-addr
@item authentication-type
@item remote-user
@item remote-ident
@item content-type
@item content-length (integer, possibly 0)
@item http-accept-types (list, possibly empty, of strings)
@item http-user-agent
@item http-cookie
@end itemize

Keys not listed above result in an "unrecognized key" error.
@end deffn
@c @twerpdoc (cgi:values)
@c ../source/cgi.doc
@deffn {Procedure} cgi:values name
Fetch any values associated with @var{name} found in the form data.
Return a list, even if it contains only one element.  A value is
either a string, or @code{#f}.  When there are multiple values, the
order is the same as that found in the form.
@end deffn
@c @twerpdoc (cgi:value)
@c ../source/cgi.doc
@deffn {Procedure} cgi:value name
Fetch only the @sc{car} from @code{(cgi:values @var{name})}.
Convenient for when you are certain that @var{name} is associated
with only one value.
@end deffn
@c @twerpdoc (cgi:uploads)
@c ../source/cgi.doc
@deffn {Procedure} cgi:uploads name
Return a list of file contents associated with @var{name},
or @code{#f} if no files are available.

Uploaded files are parsed by @code{parse-form} (@pxref{form-2-form}).
If the @code{uploads-lazy} option is specified to @code{cgi:init}, then
the file contents are those directly returned by @code{form-2-form}.
If unspecified, the file contents are strings with the object property
@code{#:guile-www-cgi} whose value is an alist with the following keys:

@table @code
@item #:name
identical to @var{name} (sanity check)

@item #:filename
original/suggested filename for this bunch of bits

@item #:mime-type
something like "image/jpeg"

@item #:raw-mime-headers
the MIME headers before parsing
@end table

Note that the string's object property and the keys are all keywords.
The associated values are strings.

Unless @code{uploads-lazy} is specified (to @code{cgi:init}),
@code{cgi:uploads} can only be called once per particular @var{name}.
Subsequent calls return @code{#f}.  Caller had better hang onto the
information, lest the garbage man whisk it away for good.  This is
done to minimize the amount of time the file is resident in memory.
@end deffn
@c @twerpdoc (cgi:upload)
@c ../source/cgi.doc
@deffn {Procedure} cgi:upload name
Fetch the first file associated with form var @var{name}.  Can only be
called once per @var{name}, so the caller had better be sure that
there is only one file associated with @var{name}.  Use @code{cgi:uploads}
if you are unsure.
@end deffn
@c @twerpdoc (cgi:cookies)
@c ../source/cgi.doc
@deffn {Procedure} cgi:cookies name
Fetch any cookie values associated with @var{name}.  Return a list of
values in the order they were found in the HTTP header, which should
be the order of most specific to least specific path associated with
the cookie.  If no cookies are associated with @var{name}, return
@code{#f}.
@end deffn
@c @twerpdoc (cgi:cookie)
@c ../source/cgi.doc
@deffn {Procedure} cgi:cookie name
Fetch the first cookie value associated with @var{name}.
@end deffn

@section Uncollated Form Data

With @code{cgi:values}, when a name occurs more than once, its associated
values are collated, thus losing information about the relative order of
different and intermingled names.  For this, you can use @code{cgi:nv-pairs}
to access the uncollated (albeit ordered) form data.

@c @twerpdoc (cgi:nv-pairs)
@c ../source/cgi.doc
@deffn {Procedure} cgi:nv-pairs
Fetch the list of @code{(name . value)}, in the same order as found
in the form data.  A name may appear more than once.  A value is
either a string, or @code{#f}.
@end deffn

@c ---------------------------------------------------------------------------
@node         main
@chapter (www main)

The @code{(www main)} module provides a generic interface useful for
retriving data named by any URL.  The URL scheme @code{http} is pre-registered.

@c @twerpdoc (www:set-protocol-handler!)
@c ../source/main.doc
@deffn {Procedure} www:set-protocol-handler! proto handler
Associate for scheme @var{proto} the procedure @var{handler}.
@var{proto} is a symbol, while @var{handler} is a procedure that
takes three strings: the host, port and path portions, respectively
of a url object.  Its return value is the return value of
@code{www:get} (for @var{proto}), and need not be a string.
@end deffn
@c @twerpdoc (www:get)
@c ../source/main.doc
@deffn {Procedure} www:get url-string
Parse @var{url-string} into portions.  For HTTP, open a connection,
retrieve and return the specified document.  Otherwise, consult the
handler procedure registered for the particular scheme and apply it
to the host, port and path portions of @var{url-string}.  If no such
handler exists, signal "unknown URL scheme" error.
@end deffn

@noindent
There is also the convenience proc @code{www:http-head-get}.

@c @twerpdoc (www:http-head-get)
@c ../source/main.doc
@deffn {Procedure} www:http-head-get url-string [alist?]
Parse @var{url-string} into portions; issue an "HTTP HEAD" request.
Signal error if the scheme for @var{url-string} is not @code{http}.
Optional second arg @code{alist?} non-@code{#f} means return only the
alist portion of the HTTP response object.
@end deffn

@c ---------------------------------------------------------------------------
@node         url-coding
@chapter (www url-coding)

The @code{(www url-coding)} module provides two procedures for decoding
and encoding URL strings for safe transmission according to RFC 1738.

@c @twerpdoc (url-coding:decode)
@c ../source/url-coding.doc
@deffn {Procedure} url-coding:decode str
Return a new string made from url-decoding @var{str}.  Specifically,
turn @code{+} into space, and hex-encoded @code{%XX} strings into
their eight-bit characters.
@end deffn
@c @twerpdoc (url-coding:encode)
@c ../source/url-coding.doc
@deffn {Procedure} url-coding:encode str reserved-chars
Return a new string made from url-encoding @var{str},
unconditionally transforming those in @var{reserved-chars}, a list
of characters, in addition to those in the standard (internal) set.
@end deffn

@c ---------------------------------------------------------------------------
@node         utcsec
@chapter (www utcsec)

The @code{(www utcsec)} module provides procedures to work with the
@dfn{utc-seconds} of an object, that is, the number of seconds after
epoch, in the GMT time zone (also known as UTC).

@c @twerpdoc (format-utcsec)
@c ../source/utcsec.doc
@deffn {Procedure} format-utcsec port format utc-seconds
Write to output port @var{port} the @var{utc-seconds}
formatted according to @var{format} (a string).
If @var{port} is @code{#f}, return the output string, instead.
This uses @code{strftime}, q.v.
@end deffn
@c @twerpdoc (rfc1123-date<-)
@c ../source/utcsec.doc
@deffn {Procedure} rfc1123-date<- port utc-seconds
Write to output port @var{port} the @var{utc-seconds}
formatted according to RFC1123.  If @var{port} is @code{#f},
return the output string, instead.

For example:

@example
(rfc1123-date<- #f 1167791441)
@result{} "Wed, 03 Jan 2007 02:30:41 GMT"
@end example
@end deffn
@c @twerpdoc (<-rfc1123-date)
@c ../source/utcsec.doc
@deffn {Procedure} <-rfc1123-date s
Parse the RFC1123-compliant date string @var{s}, and
return the utc-seconds it represents.

For example:

@example
(<-rfc1123-date "Wed, 03 Jan 2007 02:30:41 GMT")
@result{} 1167791441
@end example
@end deffn
@c @twerpdoc (<-mtime)
@c ../source/utcsec.doc
@deffn {Procedure} <-mtime filespec
Return the utc-seconds of the modification time of @var{filespec}.
@var{filespec} can be a filename (string), a port opened on a
@code{stat}able file, or the object resulting from a @code{stat}
on one of these.

For example:

@example
(= (<-mtime "COPYING")
   (<-mtime (open-input-file "COPYING"))
   (<-mtime (stat "COPYING")))
@result{} #t
@end example
@end deffn
@c @twerpdoc (<-ctime)
@c ../source/utcsec.doc
@deffn {Procedure} <-ctime filespec
Return the utc-seconds of the creation time of @var{filespec}.
@var{filespec} can be a filename (string), a port opened on a
@code{stat}able file, or the object resulting from a @code{stat}
on one of these.
@end deffn
@c @twerpdoc (rfc1123-now)
@c ../source/utcsec.doc
@deffn {Procedure} rfc1123-now
The "current time" formatted according to RFC1123.
@end deffn

@c ---------------------------------------------------------------------------
@node                      big-dishing-loop
@chapter (www server-utils big-dishing-loop)

The @code{(www server-utils big-dishing-loop)} module provides procedures
that facilitate generation of a customized listener/dispatch proc.

@c @twerpdoc (named-socket)
@c ../source/server-utils/big-dishing-loop.doc
@deffn {Procedure} named-socket family name [[keyword value] ...]
Return a new socket in protocol @var{family} with address @var{name}.
Keywords are: @code{#:socket-setup}.

First, evaluate @code{(socket @var{family} SOCK_STREAM 0)} to create
a new socket @var{sock}.  Next, handle @code{#:socket-setup}, with
value @var{setup}, like so:

@table @asis
@item @code{#f}
Do nothing.  This is the default.

@item @var{procedure}
Call @var{procedure} on @var{sock}.

@item @code{((@var{opt} . @var{val}) @dots{})}
For each pair in this alist, call @code{setsockopt}
on @var{sock} with the pair's @var{opt} and @var{val}.
@end table

Lastly, @code{bind} @var{sock} to @var{name}, which should be in a
form that is appopriate for @var{family}.  Two common cases are:

@table @code
@item PF_INET
@code{(AF_INET @var{ipaddr} @var{portno})}, made, for example, by@*
@code{(list AF_INET INADDR_ANY 4242)}.

@item PF_UNIX
@code{(AF_UNIX @var{filename})}, made, for example, by@*
@code{(list AF_UNIX "/tmp/foo-control")}.
@end table

Note that @code{PF_foo}, @code{AF_foo}, and @code{INADDR_foo} are
names of variables that have constant values, not symbols.
@end deffn

@c @twerpdoc (echo-upath)
@c ../source/server-utils/big-dishing-loop.doc
@deffn {Procedure} echo-upath M upath [extra-args...]
Use mouthpiece @var{M} (@pxref{answer}) to compose and send a
"text/plain" response which has the given @var{upath} (a string)
and any @var{extra-args} as its content.  Shut down the socket
for both transmission and reception, then return @code{#t}.

This proc can be used to
ensure basic network connectivity (i.e., aliveness testing).
@end deffn

@c @twerpdoc (make-big-dishing-loop)
@c ../source/server-utils/big-dishing-loop.doc
@deffn {Procedure} make-big-dishing-loop [keyword value ...]
Return a proc @var{dish} that loops serving http requests from a socket.
@var{dish} takes one arg @var{ear}, which may be a pre-configured socket,
a TCP port number, or a list of the form:
@code{(@var{family} @var{address} @dots{})}.
When @var{ear} is a TCP port number, it is taken
to be the list @code{(PF_INET AF_INET INADDR_ANY @var{ear})}.

In the latter two cases, the socket is realized by calling
@code{named-socket} with parameters @var{family} and @var{name} taken
from the @sc{car} and @sc{cdr}, respectively, of the list, with the
@code{#:socket-setup} paramater (see below) passed along unchanged.

@var{dish} behavior is controlled by the keyword arguments given
to @code{make-big-dishing-loop}.  The following table is presented roughly
in order of the steps involved in processing a request, with default values
shown next to the keyword.

@table @code
@findex socket-setup
@item #:socket-setup #f
This may be a proc that takes a socket, or a list of opt/val pairs which
are passed to @code{setsockopt}.  Socket setup is done for newly created
sockets (when @var{dish} is passed a TCP port number), prior to the
@code{bind} call.

@findex queue-length
@item #:queue-length 0
The number of clients to queue, as set by the @code{listen} system call.
Setting the queue length is done for both new and pre-configured sockets.

@findex concurrency
@item #:concurrency #:new-process
The type of concurrency (or none if the value is not recognized).
Here are the recognized values:

@table @code
@item #:new-process
@itemx #:new-process/nowait
Fork a new process for each request.  The latter does not wait for the
child process to terminate before continuing the listen loop.

@item #f
Handle everything in the current in process (no concurrency).
Unrecognized values are treated the same as @code{#f}.
@end table

@findex bad-request-handler
@item #:bad-request-handler #f
If the first line of an HTTP message is not in the proper form, this
specifies a proc that takes a mouthpiece @var{m}.  Its return value should
be the opposite boston value of the @code{#:loop-break-bool} value, below.
@xref{answer}.

@findex method-handlers
@item #:method-handlers ()
This alist describes how to handle the (valid) HTTP methods.
Each element has the form @code{(@var{method} . @var{handler})}.
@var{method} is a symbol, such as @code{GET}; and @var{handler} is
a procedure that handles the request for @var{method}.

@var{handler} normally takes two arguments, the mouthpiece @var{m}
and the @var{upath} (string), composes and sends a response, and
returns non-@code{#f} to indicate that the big dishing loop should
continue.

The proc's argument list is configured by @code{#:need-headers},
@code{#:need-input-port} and @code{#:explicit-return}.
Interpretation of the proc's return value is configured by
@code{#:explicit-return} and @code{#:loop-break-bool}.  See below.

@findex need-headers
@item #:need-headers #f
@itemx #:need-input-port #f
If non-@code{#f}, these cause additional arguments to be supplied to the
handler proc.  If present, the headers arg precedes the input
port arg.  @xref{parse-request}.  The input port is always positioned at
the beginning of the HTTP message body.

If @code{#:need-input-port} is @code{#f}, after the handler
proc returns, the port is @code{shutdown} in both (r/w) directions.  When
operating concurrently, this is done on the child side of the split.
@xref{Network Sockets and Communication,,,
guile, The Guile Reference Manual}.

@findex explicit-return
@item #:explicit-return #f
If non-@code{#f}, this arranges for a continuation to be passed (as
the last argument) to the handler proc, and ignores that
proc's normal return value in favor of one explicitly passed through
the continuation.  If the continuation is not used, the
@dfn{effective return value} is computed as @code{(not
#:loop-break-bool)}.

@findex loop-break-bool
@item #:loop-break-bool #f
Looping stops if the effective return value of the handler is
@code{eq?} to this value.

@findex unknown-http-method-handler
@item #:unknown-http-method-handler #f
If @code{#f}, silently ignore unknown HTTP methods, i.e., those not
specified in @code{#:method-handlers}.
The value may also be a procedure that takes three
arguments: a mouthpiece @var{m}, the @var{method} (symbol) and the
@var{upath} (string).  Its return value should be the opposite boolean
value of the @code{#:loop-break-bool} value, below.
@xref{answer}.

@findex parent-finish
@item #:parent-finish close-port
When operating concurrently (@code{#:concurrency} non-@code{#f}), the
``parent'' applies this proc to the port after the split.

@findex log
@item #:log #f
This proc is called after the handler proc returns.
Note that if @var{ear} is a unix-domain socket, the @var{client}
parameter will be simply "localhost".
@xref{log}.

@findex status-box-size
@item #:status-box-size #f
This may be a non-negative integer, typically 0, 1 or 2.  It is used
by @code{#:log} (has no meaning if @code{#:log} is @code{#f}).
@xref{log}.

@findex style
@item #:style #f
An object specifying the syntax of the first-line and headers.
The default specifies a normal HTTP message (@pxref{http}).
@end table
@end deffn

The combination of @code{#:need-headers}, @code{#:need-input-port} and
@code{#:explicit-return} mean that the @code{#:GET-upath} proc can receive
anywhere from two to five arguments.  Here is a table of all the possible
combinations (1 means non-@code{#f} and 0 means @code{#f}):

@example
+----- #:explicit-return
| +--- #:need-input-port
| | +- #:need-headers
| | |
| | |  args to #:GET-upath proc
=====  ==============================
0 0 0  M upath
0 0 1  M upath headers
0 1 0  M upath in-port
0 1 1  M upath headers in-port
1 0 0  M upath return
1 0 1  M upath headers return
1 1 0  M upath in-port return
1 1 1  M upath headers in-port return
@end example

@c ---------------------------------------------------------------------------
@node                      parse-request
@chapter (www server-utils parse-request)

The @code{(www server-utils parse-request)} module provides procedures to
read the first line, the headers and the body, of an HTTP message on the
input port.

@c @twerpdoc (read-first-line)
@c ../source/server-utils/parse-request.doc
@deffn {Procedure} read-first-line port
Parse the first line of the HTTP message from input @var{port} and
return a list of the method, URL path and HTTP version indicator, or
@code{#f} if the line ends prematurely or is otherwise malformed.  A
successful parse consumes the trailing @samp{CRLF} of the line as
well.  The method is a symbol with its constituent characters
upcased, such as @code{GET}; the other elements are strings.  If the
first line is missing the HTTP version, @code{parse-first-line}
returns the default "HTTP/1.0".
@end deffn
@c @twerpdoc (hqf<-upath)
@c ../source/server-utils/parse-request.doc
@deffn {Procedure} hqf<-upath upath
Parse @var{upath} and return three values representing
its hierarchy, query and fragment components.
If a component is missing, its value is @code{#f}.

@example
(hqf<-upath "/aa/bb/cc?def=xyz&hmm#frag")
@result{} #<values "/aa/bb/cc" "def=xyz&hmm" "frag">

(hqf<-upath "/aa/bb/cc#fr?ag")
@result{} #<values "/aa/bb/cc" #f "fr?ag">
@end example
@end deffn
@c @twerpdoc (alist<-query)
@c ../source/server-utils/parse-request.doc
@deffn {Procedure} alist<-query query-string
Parse urlencoded @var{query-string} and return an alist.
For each element @code{(@var{name} . @var{value})} of the alist,
@var{name} is a string and @var{value} is either @code{#f} or a string.
@end deffn
@c @twerpdoc (read-headers)
@c ../source/server-utils/parse-request.doc
@deffn {Procedure} read-headers port
Parse the headers of the HTTP message from input @var{port} and
return a list of key/value pairs, or @code{#f} if the message ends
prematurely or is otherwise malformed.  Both keys and values are
strings.  Values are trimmed of leading and trailing whitespace and
may be empty.  Values that span more than one line have their
"continuation whitespace" reduced to a single space.  A successful
parse consumes the trailing @samp{CRLF} of the header block as well.
@end deffn

@noindent
Sometimes you are interested in the body of the message but not the headers.
In this case, you can use @code{skip-headers} to quickly position the port.

@c @twerpdoc (skip-headers)
@c ../source/server-utils/parse-request.doc
@deffn {Procedure} skip-headers port
Scan without parsing the headers of the HTTP message from input
@var{port}, and return the empty list, or @code{#f} if the message
ends prematurely.  A successful scan consumes the trailing
@samp{CRLF} of the header block as well.
@end deffn
@c @twerpdoc (read-body)
@c ../source/server-utils/parse-request.doc
@deffn {Procedure} read-body len port
Return a new string of @var{len} bytes with contents
read from input @var{port}.
@end deffn

@c ---------------------------------------------------------------------------
@node                      form-2-form
@chapter (www server-utils form-2-form)

The @code{(www server-utils form-2-form)} module provides a procedure to
parse a string in @samp{multipart/form-data} format.

@c @twerpdoc (parse-form)
@c ../source/server-utils/form-2-form.doc
@deffn {Procedure} parse-form content-type-more raw-data
Parse @var{raw-data} as raw form response data of enctype
@samp{multipart/form-data} and return an alist.

@var{content-type-more} is a string that should include the
@code{boundary="@dots{}"} information.  (This parameter name reflects the
typical source of such a string, the Content-Type header value, after the
@samp{multipart/form-data}.)

Each element of the alist has the form @code{(@var{name} . @var{value})},
where @var{name} is a string and @var{value} is either a string or four
values (extractable by @code{call-with-values}):

@table @var
@item filename
A string, or @code{#f}.
@item type
A string representing the MIME type of the uploaded file.
@item raw-headers
A string, including all eol @sc{crlf} chars.
Incidentally, the @var{type} should be
(redundantly) visible in one of the headers.
@item squeeze
A procedure that takes one arg @var{abr} (standing for access byte
range).  If @var{abr} is @code{#f}, then internal references to the
uploaded file's data are dropped.  Otherwise, @var{abr} should be a
procedure that takes three arguments: a string, a beginning index
(integer, inclusive), and an ending index (integer, exclusive).
@end table

If there is no type information, @var{value} is a simple non-empty string,
and no associated information (filename, raw-headers, squeeze) is kept.

@code{parse-form} ignores @dfn{degenerate uploads}, that is those parts
of @code{raw-data} where the part header specifies no filename and the
part content-length is zero or unspecified.
@end deffn

@heading why @code{squeeze}?
The @var{squeeze} interface can help reduce data motion.  Consider a common
upload scenario: client uploads file(s) for local (server-side) storage.

@example
classic  squeeze
   *        *       0. (current-input-port)
   *        *       1. Guile-WWW string (for parsing purposes)
   *                2. your substring (image/jpeg)
   *        *       3. filesystem
@end example

@noindent
You can achieve the same effect as the ``classic'' approach by specifying
@code{substring} (or something like it) as the access-byte-range proc, but
@strong{you don't have to}.  You could, instead, call @var{squeeze} with a
procedure that writes the byte range directly to the filesystem.

@c ---------------------------------------------------------------------------
@node                      filesystem
@chapter (www server-utils filesystem)

The @code{(www server-utils filesystem)} module provides procedures for
cleaning filenames, checking filesystem access, and mapping from a URL path to
a filename.

@c @twerpdoc (cleanup-filename)
@c ../source/server-utils/filesystem.doc
@deffn {Procedure} cleanup-filename name
Return a new filename made from cleaning up filename @var{name}.
Cleaning up is a transform that collapses each of these, in order:

@itemize
@item @samp{//}
@item @samp{/./}
@item @samp{/@var{foo}/../}
@end itemize

into a single slash (@samp{/}), everywhere in @var{name}, plus some
fixups.  The transform normally preserves the trailing slash (if any)
in @var{name}, and does not change any leading @samp{..} components
if @var{name} is relative, i.e., does not begin with slash.  Due to
proper @samp{/@var{foo}/../} cancellation for relative @var{name},
however, the result may be the empty string.  (Here, @dfn{proper}
means that @var{foo} is not @samp{..}, but a normal filename
component.)
@end deffn

@noindent
Following is a fairly comprehensive list of the @code{cleanup-filename}
edge cases, paired by @var{name} and result.  The numbers represent
string lengths.

@example
  0                     ;; @r{empty string}
  0                     ;; @r{result is empty string}

  1  /
  1  /

  2  ok
  2  ok

  3  ok/
  3  ok/

  3  /ok
  3  /ok

  4  /ok/
  4  /ok/

  1  .                  ;; @r{relative name}
  0                     ;; @r{result is empty string}

  2  ./                 ;; @r{likewise}
  0                     ;; @r{note, end-slash @strong{not} preserved}

  2  /.
  1  /

  3  /./
  1  /

  2  ..                 ;; @r{relative, with leading double-dot}
  2  ..                 ;; @r{unchanged}

  3  ../                ;; @r{likewise}
  3  ../

  3  /..                ;; @r{absolute}
  1  /                  ;; @r{can't go higher than root}

  4  /../
  1  /

  4  ./..               ;; @r{next 8 are like the previous 4;}
  2  ..                 ;;  @r{they show that} . @r{makes no difference}

  5  ./../
  3  ../

  5  /./..
  1  /

  6  /./../
  1  /

  4  ../.
  2  ..

  5  .././
  3  ../

  5  /../.
  1  /

  6  /.././
  1  /

  5  ../..              ;; @r{relative}
  5  ../..              ;; @r{leading} .. @r{sequences unchanged}

  6  ../../
  6  ../../

  6  /../..             ;; @r{absolute}
  1  /                  ;; @r{can't go higher than root}

  7  /../../
  1  /

  4  z/..               ;; @r{relative}
  0                     ;; @r{only dir cancelled} @result{} @r{empty string}

  5  z/../              ;; @r{likewise}
  0

  5  /z/..              ;; @r{absolute}
  1  /

  6  /z/../
  1  /

  6  z/../o             ;; @r{next 4 like previous 4, with trailing component}
  1  o

  7  z/../o/
  2  o/

  7  /z/../o
  2  /o

  8  /z/../o/
  3  /o/

  8  z/./../o           ;; @r{next 4 like previous 4;}
  1  o                  ;;  @r{they show that} . @r{makes no difference}

  9  z/./../o/
  2  o/

  9  /z/./../o
  2  /o

 10  /z/./../o/
  3  /o/

  9  z/../../o          ;; @r{relative, more double-dot than parents}
  4  ../o               ;; @r{leftover double-dot preserved}

 10  z/../../o/
  5  ../o/

 10  /z/../../o         ;; @r{absolute, more double-dot than parents}
  2  /o                 ;; @r{all cancelled}

 11  /z/../../o/
  3  /o/

 43  ../../abc/././bye0/./../def/bye1/bye2/../..        ;; bye bye-bye
 14  ../../abc/def/

 44  ../../abc/././bye0/./../def/bye1/bye2/../../
 14  ../../abc/def/

 44  /../../abc/././bye0/./../def/bye1/bye2/../..
  9  /abc/def/

 45  /../../abc/././bye0/./../def/bye1/bye2/../../
  9  /abc/def/
@end example

@c @twerpdoc (access-forbidden?-proc)
@c ../source/server-utils/filesystem.doc
@deffn {Procedure} access-forbidden?-proc docroot forbid-rx
Create and return a filesystem-access procedure based on
@var{docroot} and @var{forbid-rx}.  The returned procedure @var{p}
takes a @var{filename} and returns @code{#t} if access to that file
should be denied for any of the following reasons:

@itemize
@item @var{filename} does not begin with @var{docroot}
@item @var{filename} matches regular expression @var{forbid-rx}
@end itemize

If @var{forbid-rx} is @code{#f}, the regular expression check is
skipped.  @var{p} returns @code{#f} if access should be granted.
@end deffn
@c @twerpdoc (upath->filename-proc)
@c ../source/server-utils/filesystem.doc
@deffn {Procedure} upath->filename-proc docroot [dir-indexes]
Create and return a url-path-to-filename mapping procedure based on
@var{docroot}.  The returned procedure @var{p} takes a (string)
@var{upath} and returns a valid local filename path for the requested
resource, or @code{#f} if that file cannot be found.  Optional arg
@var{dir-indexes} specifies an ordered list of filenames to try if
the resolved filename path turns out to be a directory.

If no such files exist, return the directory name.  As a special
case, when @var{p} encounters a value of @code{#f} during iteration
over @var{dir-indexes}, it returns @code{#f} immediately.

For example, presuming files @file{/a/b/c.txt} and
@file{/a/b/index.html} both exist and are readable:

@example
(define resolve (upath->filename-proc
                   "/a/b/"
                   '("index.shtml" "index.html")))

(resolve "/random") @result{} #f
(resolve "/c.txt") @result{} "/a/b/c.txt"
(resolve "/") @result{} "/a/b/index.html"
@end example

Directory names are always returned with a trailing slash.
@end deffn
@c @twerpdoc (filename->content-type)
@c ../source/server-utils/filesystem.doc
@deffn {Procedure} filename->content-type filename [default]
Return a valid Content-Type string which matches @var{filename} best.
Matching is done by comparing the extension (part of @var{filename} after
the last "." if available) against a table.  If none match, return
"application/octet-stream".  Optional arg @var{default} specifies another
value to use instead of "application/octet-stream".

If there are multiple MIME types associated with the extension,
return the first one.

@xref{mime-types}, proc @code{put-mime-types!}, for more info.
@end deffn

@c ---------------------------------------------------------------------------
@node                      cgi-prep
@chapter (www server-utils cgi-prep)

Often the server cannot do everything by itself, and makes use of
external programs invoked in a @dfn{common gateway interface} environment.
These programs are also known as @dfn{CGI scripts}.

The @code{(www server-utils cgi-prep)} module provide a procedure to set up
such an environment.  Actually invoking the CGI script is not covered.

@c @twerpdoc (cgi-environment-manager)
@c ../source/server-utils/cgi-prep.doc
@deffn {Procedure} cgi-environment-manager initial-bindings
Return a closure encapsulating @var{initial-bindings}, a list of
pairs @code{(@var{name} . @var{value})}, where @var{name} is a symbol
listed in the following table, and @var{value} is a string unless
otherwise noted.

@itemize
@item @code{server-hostname}
@item @code{gateway-interface}
@item @code{server-port} (integer)
@item @code{request-method}
@item @code{path-info}
@item @code{path-translated}
@item @code{script-name}
@item @code{query-string}
@item @code{remote-host}
@item @code{remote-addr}
@item @code{authentication-type}
@item @code{remote-user}
@item @code{remote-ident}
@item @code{content-type}
@item @code{content-length} (integer, or @code{#f})
@item @code{http-user-agent}
@item @code{http-cookie}
@item @code{server-software}
@item @code{server-protocol}
@item @code{http-accept-types} (list of strings)
@end itemize

If @var{name} is not recognized, signal "unrecognized key" error.
Encapsulation includes @code{@var{name}=@var{value}} formatting.

The closure accepts these commands:

@table @code
@item name value
Encapsulate an additional binding.
@var{name} and @var{value} are as above.

@item #:clear!
Drop the additional bindings.  Note that initial bindings can
never be dropped (you can always create a new closure).

@item #:environ-list
Return a list of strings suitable for passing to @code{environ}
or as the second argument to @code{execle}.
@end table

Any other command results in a "bad command" error.
@end deffn

@heading example
Following is a simple example of how to use @code{cgi-environment-manager}.
A more realistic example would include port and connection management,
input validation, error handling, logging, etc.  First, we set up the
manager with more-or-less constant bindings.

@example
(define M (cgi-environment-manager
            '((server-software . "FooServe/24")
              (server-protocol . "HTTP/1.0")
              (server-port . 80))))
@end example

@noindent
Later, we add connection-specific bindings.  We use @code{read-first-line}
from the @ref{parse-request} module.

@example
(define PORT ...)
(define UPATH (list-ref (read-first-line PORT) 1))
(define QMARK (string-index UPATH #\?))
(define CGI (substring UPATH 0 QMARK))

(M 'script-name CGI)
(M 'query-string (substring UPATH (1+ QMARK)))
@end example

@noindent
Lastly, we spawn the child process, passing the constructed environment as
the second arg to @code{execle}, and drop the connection-specific bindings
afterwards.

@example
(let ((pid (primitive-fork)))
  (if (zero? pid)
      (execle CGI (M #:environ-list) (list CGI)) ; child
      (waitpid pid)))                            ; parent

(M #:clear!)
@end example

@noindent
Now we can re-use @code{M} for another connection.

@c ---------------------------------------------------------------------------
@node                      cookies
@chapter (www server-utils cookies)

Cookies are bits of client-side state the server can maintain through
designated HTTP response headers.  At this time (2009), there are two
specifications,
RFC2109@footnote{@uref{http://www.faqs.org/rfcs/rfc2109.html,RFC2109}}
and
RFC2965@footnote{@uref{http://www.faqs.org/rfcs/rfc2965.html,RFC2965}},
the latter obsoleting the former.

This chapter describes the @code{(www server-utils cookies)} module,
which provides facilities for creating such headers, and parsing those
sent by the client.  Procedures that return trees are meant to be used with
the @code{mouthpiece} command @code{#:add-header} (@pxref{answer}).

@c @twerpdoc (simple-parse-cookies)
@c ../source/server-utils/cookies.doc
@deffn {Procedure} simple-parse-cookies string
Parse @var{string} for cookie-like fragments using the simple regexp:
@example
(,[ \t]*)*([^=]+)=([^,]+)
@end example

Return a list of elements @code{(@var{name} . @var{value})},
where both @var{name} and @var{value} are strings.  For example:

@example
(simple-parse-cookies "abc=def; z=z, ans=\"42\", abc=xyz")
@result{} (("abc" . "def; z=z") ("ans" . "\"42\"") ("abc" . "xyz"))
@end example
@end deffn
@c @twerpdoc (rfc2109-set-cookie-string)
@c ../source/server-utils/cookies.doc
@deffn {Procedure} rfc2109-set-cookie-string name value [keyword arg...]
Return a string suitable for inclusion into an HTTP response header
as a cookie with @var{name} and @var{value}.  Both args may be strings,
symbols or keywords.  Also, recognize and format appropriately the
optional keyword parameters @code{#:path}, @code{#:domain},
@code{#:expires} (strings); and @code{#:secure} (boolean).
@end deffn
@c @twerpdoc (rfc2965-set-cookie2-tree)
@c ../source/server-utils/cookies.doc
@deffn {Procedure} rfc2965-set-cookie2-tree M [cookie-specs...]
Compute a list suitable for inclusion in an HTTP response header,
composed by formatting @var{cookie-specs}, each a list of the form
@code{(@var{name} @var{value} @var{a1} @var{v1@dots{}})}.  Each
@var{name} may be a string, symbol or keyword.  Each @var{value} may
be a string or symbol.  Each @var{a} must be a keyword, precisely one
of:

@example
#:Comment  #:CommentURL  #:Discard  #:Domain
#:Max-Age  #:Path  #:Port  #:Secure
@end example

The #:Version attribute is automatically included as the last one;
it cannot be specified (or de-specified).

Possible values for @var{v} depend on @var{a}.  If @var{a} is
@code{#:Discard} or @code{#:Secure}, then there is no @var{v} (it must
be omitted).  If @var{a} is @code{#:Port}, then @var{v} must be either
a number; a list of numbers, for instance @code{(8001 8002 8003)}; or
omitted entirely.  If @var{a} is @code{#:Max-Age}, then @var{v} must
be a number.  For all other @var{a}, @var{v} can be a string or symbol.

If @var{M} is @code{#f}, return a list.  The @sc{car} of the list is
the keyword @code{#:Set-Cookie2}, and the @sc{cdr} is a tree of
strings.  Otherwise @var{M} should be a @code{mouthpiece}
(@pxref{answer}) in which case it is applied with the
@code{#:add-header} command to the list.
@end deffn

@heading example
Here is an example that demonstates both RFC2109 and RFC2965 formatting.
Notable differences: the keyword to specify the path is now capitalized; the
representation of the cookie's value is now double-quoted.

@example
;; RFC2109
(rfc2109-set-cookie-string 'war 'lose #:path "/ignorance/suffering")
@result{} "Set-Cookie: war=lose; path=/ignorance/suffering"

;; RFC2965
(use-modules ((www server-utils answer) #:select (walk-tree)))

(define TREE (rfc2965-set-cookie2-tree
              '(war lose #:Path "/ignorance/suffering" #:Discard)))

(car TREE)
@result{} #:Set-Cookie2

(walk-tree display (cdr TREE))
@print{} war="lose";Path="/ignorance/suffering";Discard;Version=1
@end example

@noindent
To generate a cookie spec from the @code{Cookie} http response header sent by
a client, you can use @code{rfc2965-parse-cookie-header-value}.

@c @twerpdoc (rfc2965-parse-cookie-header-value)
@c ../source/server-utils/cookies.doc
@deffn {Procedure} rfc2965-parse-cookie-header-value s [flags...]
Parse the @code{Cookie} HTTP response header string @var{s}.
Return a list of the form @code{(@var{vers} @var{n}
[@var{cookie-spec}@dots{}])}, where @var{vers} is the version number
of the cookie specification, 0 (zero) for RFC2109 compliance and 1
(one) for RFC2965 compliance; and @var{n} is the number of
cookie-specs the @sc{cdr} of the form.

Each @var{cookie-spec} has the form: @code{(@var{name} @var{value} @var{a1}
@var{v1}@dots{})}.
@var{name}, @var{value} are strings.  Each @var{a} is a keyword,
one of @code{#:Path}, @code{#:Domain} or @code{#:Port}.  Each @var{v}
is a string, except for that associated with @code{#:Port}, which
is can be either a single number or a list of numbers.

Optional @var{flags} configure the parsing and/or return value.

@table @code
@item #:keep-attribute-dollarsign-prefix
Prevent conversion of, for example, @code{#:$Port} to @code{#:Port}.

@item #:strict-comma-separator
Disable support for older clients that use a semicolon to separate
cookies instead of a comma.  Normally, parsing copes (heuristically)
with this by reparsing an unrecognized attribute as the beginning of a
new cookie.  With this flag, an unrecognized attribute signals an error.

@item #:canonicalize-NAME-as-keyword
Convert the @var{name} in each cookie-spec into a keyword whose
first character and characters following a hyphen are upcased.
For example, "session-id-no" would become @code{#:Session-Id-No}.
@end table

Parsing may signal an error and display an error message in the form:
``@var{situation} while @var{context}'', where @var{situation} is one of
``unexpected end'', ``missing equal-sign'', ``bad attribute'', or
``missing semicolon''; and @var{context} is one of: ``reading string'',
``reading token'', ``reading pair'', ``reading one cookie'' or
``parsing''.  The error message also displays string @var{s} on a line
by itself and on the next line a caret by itself indented to be at
(or near) the site of the error.
@end deffn

@noindent
RFC2965 also specifies some other small algorithms, some of which are codified
as procedures available in this module.

@c @twerpdoc (reach)
@c ../source/server-utils/cookies.doc
@deffn {Procedure} reach h
Return the @dfn{reach} (a string) of host name @var{h}.
Quoting from RFC2965 section 1 (Terminology):

@format
The reach R of a host name H is defined as follows:
If
  - H is the host domain name of a host; and,
  - H has the form A.B; and
  - A has no embedded (that is, interior) dots; and
  - B has at least one embedded dot, or B is the string "local".
then the reach of H is .B.
Otherwise, the reach of H is H.
@end format

Note that comparison with "local" uses @code{string=?},
i.e., case-sensitively.
@end deffn

@c ---------------------------------------------------------------------------
@node                      answer
@chapter (www server-utils answer)

The @code{(www server-utils answer)} module provides a simple wrapper
around the formatting/accounting requirements of a standard HTTP
response.  Additionally, the @code{#:rechunk-content} facility allows
some degree of performance tuning; a server may be able to achieve
better throughput with certain chunk sizes than with others.

The output from @code{mouthpiece} and @code{string<-headers}
is formatted according to their optional @code{style} argument.
By default, headers have the form:

@example
NAME #\: #\space VALUE #\cr #\lf
@end example

@noindent
Additionally, for @code{mouthpiece}, the first line, preceding all the
headers, has the form:

@example
HTTP/1.0 @var{nnn} @var{msg}
@end example

@noindent
and a single @code{#\cr #\lf} pair separates the headers from the body.
The @code{style} support is @strong{experimental} (@pxref{modlisp}).

@c @twerpdoc (mouthpiece)
@c ../source/server-utils/answer.doc
@deffn {Procedure} mouthpiece out-port [status-box [style]]
Return a command-delegating closure capable of writing a properly formatted
HTTP 1.0 response to @var{out-port}.  Optional arg @var{status-box} is a
list whose @sc{car} is set to the numeric status code given to a
@code{#:set-reply-status} command.  If @var{status-box} has length of two
or more, its @sc{cadr} is set to the content-length on @code{#:send-reply}.
A content-length value of @code{#f} means there have been no calls to
@code{#:add-content}.  The commands and their args are:

@table @code
@findex reset-protocol!
@item #:reset-protocol!
Reset internal state, including reply status, headers and content.
This is called automatically by @code{#:send-reply}.

@findex set-reply-status
@item #:set-reply-status @var{number} @var{message}
Set the reply status.  @var{message} is a short string.

@findex set-reply-status:success
@item #:set-reply-status:success
This is equivalent to @code{#:set-reply-status 200 "OK"}.

@findex add-header
@item #:add-header @var{name} @var{value}
@var{name} may be @code{#f}, @code{#t}, a string, symbol or keyword.
@var{value} is a string.  If @var{name} is @code{#f} or @code{#t},
@var{value} is taken to be a pre-formatted string, "A: B" or "A:
B\r\n", respectively.  If @var{name} is not a boolean, @var{value}
may also be a tree of strings or a number.

@findex add-content
@item #:add-content [@var{tree} @dots{}]
@var{tree} may be a string, a nested list of strings, or a series of such.
Subsequent calls to @code{#:add-content} append their trees to the
collected content tree thus far.

@findex add-formatted
@item #:add-formatted @var{format-string} [@var{args} @dots{}]
@var{format-string} may be @code{#f} to mean @code{~S}, @code{#t} to
mean @code{~A}, or a normal format string.  It is used to format
@var{args}, and the result passed to @code{#:add-content}.

@findex add-direct-writer
@item #:add-direct-writer @var{len} @var{write}
@var{len} is the number of bytes that procedure @var{write} will
output to its arg, @var{out-port} (passed back), when called during
@code{#:send-reply}.  This is to allow sendfile(2) and related
hackery.

@findex content-length
@item #:content-length
Return the total number of bytes in the content added thus far.

@findex rechunk-content
@item #:rechunk-content @var{chunk}
@var{chunk} may be @code{#f}, in which case a list of the string
lengths collected thus far is returned; @code{#t} which means to use
the content length as the chunk size (effectively producing one
chunk); or a number specifying the maximum size of a chunk.  The
return value is a list of the chunk sizes.

It is an error to use @code{#:rechunk-content} with a non-@code{#f}
@var{chunk} in the presence of a previous @code{#:add-direct-writer}.

@findex inhibit-content!
@item #:inhibit-content! @var{bool}
Non-@code{#f} @var{bool} arranges for @code{#:send-reply} (below) to
compute content length and add the appropriate header, as usual, but
no content is actually sent.  This is useful, e.g., when answering a
@code{HEAD} request.  If @var{bool} is @code{#f}, @code{#:send-reply}
acts normally (i.e., sends both headers and content).

@findex send-reply
@item #:send-reply [close]
Send the properly formatted response to @var{out-port}, and reset
all internal state (status reset, content discarded, etc).  It is
an error to invoke @code{#:send-reply} without having first set
the reply status.

Optional arg @var{close} means do a @code{shutdown} on @var{out-port}
using @var{close} --- directly, if an integer, or called with no
arguments, if a thunk --- as the shutdown @code{how} argument.
(Note: If @var{out-port} is not a socket, this does nothing silently.)
@xref{Network Sockets and Communication,,,guile}.

If @var{close} is specified, the closure forgets about @var{out-port}
internally; it is an error to call other mouthpiece commands,
subsequently.
@end table
@end deffn

@heading example
Here is an example that uses most of the @code{mouthpiece} commands:

@example
(use-modules (www server-utils filesystem) (scripts slurp))

(define SERVER-NAME "Guile-WWW-example-server")
(define SERVER-VERSION "1.0")
(define STATUS (list #f #f))
(define M (mouthpiece (open-output-file "fake") STATUS))

(define (transmit-file filename)
  (M #:set-reply-status:success)
  (M #:add-header #:Server (string-append SERVER-NAME " "
                                          SERVER-VERSION))
  (M #:add-header #:Connection "close")
  (M #:add-header #:Content-Type (filename->content-type
                                  filename "text/plain"))
  (M #:add-content (slurp filename))
  (simple-format #t "rechunked: ~A\n"
                 (M #:rechunk-content (* 8 1024)))
  ;; We don't shutdown because this is a file port;
  ;; if it were a socket, we might specify 2 to
  ;; stop both reception and transmission.
  (M #:send-reply))

(transmit-file "COPYING")
@print{} rechunked: (8192 8192 1605)
STATUS
@result{} (200 17989)
@end example

@noindent
For higher performance, you can preformat parts of the response, using
@code{CRLF}, and some lower-level convenience procedures.
If preformatting is not possible (or desirable), you can still
declare a nested list of strings (aka @dfn{tree}) to have a
@dfn{flat length}, i.e., the size in bytes a tree would occupy
once flattened, thus enabling internal optimizations.
(The flat length of a string is its @code{string-length}.)

@defvr {Scheme String} CRLF
The string ``\r\n''.
@end defvr

@deffn {Object Property} flat-length
The value is a non-negative integer, or @code{#f} if not yet computed.
@end deffn

@c @twerpdoc (fs)
@c ../source/server-utils/answer.doc
@deffn {Procedure} fs s [args...]
Return a new string made by using format string @var{s} on @var{args}.
As in @code{simple-format} (which this procedure uses), @code{~A} expands
as with @code{display}, while @code{~S} expands as with @code{write}.
@end deffn
@c @twerpdoc (walk-tree)
@c ../source/server-utils/answer.doc
@deffn {Procedure} walk-tree proc tree
Call @var{proc} for each recursively-visited leaf in @var{tree}, excluding
empty lists.  It is an error for @var{tree} to contain improper lists.
@end deffn
@c @twerpdoc (tree-flat-length!)
@c ../source/server-utils/answer.doc
@deffn {Procedure} tree-flat-length! tree
If @var{tree} is a string, return its @code{string-length}.
If @var{tree} already has a @code{flat-length}, return that.
Otherwise, recursively compute, set, and return the
@code{flat-length} of @var{tree}.
@end deffn
@c @twerpdoc (string<-tree)
@c ../source/server-utils/answer.doc
@deffn {Procedure} string<-tree tree
Return a new string made from flattening @var{tree}.
Set the @code{flat-length} (using @code{tree-flat-length!})
of @var{tree} by side effect.
@end deffn
@c @twerpdoc (string<-headers)
@c ../source/server-utils/answer.doc
@deffn {Procedure} string<-headers alist [style]
Return a string made from formatting name/value pairs in @var{alist},
according to the optional @code{style} argument.  If unspecified or
specified as @code{#f}, the default is to format headers like so:

@example
NAME #\: #\space VALUE #\cr #\lf
@end example

Each name may be a string, symbol or keyword.  Each value may be a
string, number, symbol, or a tree.
@end deffn
@c @twerpdoc (string<-header-components)
@c ../source/server-utils/answer.doc
@deffn {Procedure} string<-header-components n v [n1 v1...]
Return a string made from formatting header name @var{n} and value
@var{v}.  Additional headers can be specified as alternating name and
value args.  Each header is formatted like so: ``@var{name}:
@var{value}\r\n''.

Each @var{n} may be a string, symbol or keyword.  Each @var{v} may be a
string, number, symbol, or a tree.

@strong{NOTE}: This proc @strong{will be removed} after 2011-12-31.
Use @code{string<-headers} instead.
@end deffn

@heading example
Here is @code{transmit-file} from the above example, slightly modified to use
preformatted headers and @code{fs}:

@example
(define CONSTANT-HEADERS
  (string<-headers
   `((#:Server     . ,(fs "~A ~A" SERVER-NAME SERVER-VERSION))
     (#:Connection . "close"))))

(define (transmit-file filename)
  (M #:set-reply-status:success)
  (M #:add-header #t CONSTANT-HEADERS)
  (M #:add-header #:Content-Type (filename->content-type
                                  filename "text/plain"))
  (M #:add-content (slurp filename))
  (display (fs "rechunked: ~A\n" (M #:rechunk-content (* 8 1024))))
  (M #:send-reply))
@end example

@noindent
Note that @code{mouthpiece} accepts trees for both @code{#:add-header} and
@code{#:add-content} commands.  Thus, the following two fragments give the
same result, although the latter is both more elegant and more efficient:

@example
;; Doing things "manually".
(walk-tree (lambda (string)
             (M #:add-content string))
           tree)

;; Letting the mouthpiece handle things.
(M #:add-content tree)
@end example

@c ---------------------------------------------------------------------------
@node                      log
@chapter (www server-utils log)

The @code{(www server-utils log)} module provides procedure generators for
writing log information to an output port.  Each generator is conventionally
named @code{log-SOMETHING-proc}.

@c @twerpdoc (log-http-response-proc)
@c ../source/server-utils/log.doc
@deffn {Procedure} log-http-response-proc port [gmtime? [stamp-format [method-pair?]]]
Return a procedure that writes an HTTP response log entry to @var{port}.
The procedure is called with args @var{client}, @var{method}, @var{upath}
(strings or symbols) and @var{status} (either an atom or a list), and
writes a one-line entry of the form:

@example
CLIENT - - [YYYY-MM-DD:HH:MM:SS TZ] "METHOD UPATH" STATUS1 STATUS2...
@end example

where the @samp{YYYY..TZ} are the year, month, day, hour, minute,
second and timezone components, respectively, of the @code{localtime}
representation of the current time; and @samp{STATUSn} are the
space-separated elements of @var{status}.

Optional second arg @var{gmtime?} non-@code{#f} means use
@code{gmtime} instead of @code{localtime}.  Optional third arg
@var{stamp-format} specifies a format string passed to
@code{strftime} to use for the timestamp portion that appears between
the square braces (default: "%Y-%m-%d:%H:%M:%S %Z").

Optional fourth arg @var{method-pair?} non-@code{#f} means that
@var{method} is expected to be a pair @code{(@var{meth}
. @var{vers})}, in which case the portion between the double quotes
becomes "@var{meth} @var{upath} @var{vers}".  This is to support
excruciating conformity to Apache for the benefit of downstream
programs that might fall over less than gracefully otherwise.  Please
enjoy the slack.

The buffering mode for @var{port} is set to line-buffered.
@end deffn

@c ---------------------------------------------------------------------------
@node                      modlisp
@chapter (www server-utils modlisp)

The @code{(www server-utils modlisp)} module provides @strong{experimental}
support for the implementing the Lisp side of the Apache mod_lisp protocol,
in the form of a header-grokking protocol object for the big dishing loop,
and a style elements object for the mouthpiece.  When these objects are
specified, the headers are read from (written to) the Apache front end in
the form:

@example
@var{name} #\lf @var{value} #\lf
@end example

@noindent
with a lone @samp{end\n} to separate the headers from the body.
Furthermore, on input, the headers must include @code{method},
@code{url} and @code{server-protocol}.  On output, the status
information (always output first) has the form:

@example
"Status" #\lf @var{nnn} #\space @var{msg} #\lf
@end example

@noindent
Note that this is in essense the same format as used for the headers,
with @var{name} being @samp{Status}
and @var{value} being @samp{@var{nnn} @var{msg}}.

@defvr {Object} modlisp-hgrok
An object suitable for the value of @code{make-big-dishing-loop}
keyword argument @code{#:style}.
@xref{big-dishing-loop}.
@end defvr

@defvr {Object} modlisp-ish
An object suitable as the optional @code{style} argument for both
@code{string<-headers} and @code{mouthpiece}.
@xref{answer}.
@end defvr

Although these are separate objects, you should probably use or not use them
in conjunction, lest the front-end (Apache) server become confused.

@c ---------------------------------------------------------------------------
@node              http-status
@chapter (www data http-status)

The @code{(www data http-status)} module exports a single procedure:

@c @twerpdoc (http-status-string)
@c ../source/data/http-status.doc
@deffn {Procedure} http-status-string number
Return the string associated with HTTP status @var{number}.
@end deffn

@heading example
Here is a simple example using this module:

@example
(use-modules ((www data http-status)
              #:select (http-status-string)))

(define (h2 n)
  (format #f "<H2>~A ~A</H2>"
          n (http-status-string n)))

(h2 404) @result{} "<H2>404 Not Found</H2>"
(h2 307) @result{} "<H2>307 Temporary Redirect</H2>"
@end example

@c ---------------------------------------------------------------------------
@node              mime-types
@chapter (www data mime-types)

The @code{(www data mime-types)} module maintains an internal hash table
mapping filename extensions to one or more @dfn{mime-types}.

The exported procedures provide convenience abstractions over the
underlying hash-table manipulation operations, including extension
and mime-type validation, init from a file in a ``standard'' format
(i.e., that of @file{/etc/mime.types} or @file{~/.mime.types}), and
support for straightforward incremental init (aka @dfn{merging}).
There are two predefined entries in the hash table:

@example
text => text/plain
html => text/html
@end example

@noindent
To support merging, the @code{put-FOO} procedures both take a
symbol @var{resolve} as the first arg, which specifies how
@dfn{conflicts} should be handled.  This happens when the hash
table already contains an entry for @var{extension} and
@var{new-mime-type} differs from @var{old-mime-type}.

@table @code
@item error
Throw an error with key @code{mime-type-conflict},
displaying a message describing the @var{extension},
@var{old-mime-type} and @var{new-mime-type}.

@item prefix
Make the mime-type of @var{extension} a list (unless already one),
with @var{new-mime-type} at the beginning.

@item suffix
Make the mime-type of @var{extension} a list (unless already one),
with @var{new-mime-type} at the end.

@item stomp
Use @var{new-mime-type} directly, discarding @var{old-mime-type}.

@item quail
Discard @var{new-mime-type}, keeping @var{old-mime-type}.
@end table

@noindent
For any other method, the operation throws an error, with key
@code{invalid-resolve}.

Validation happens on all ``put'' operations.  The extension must
be a symbol, such as @code{txt}.  The mime-type must be a symbol
with exactly one @samp{/} (slash) in its name, such as
@code{text/plain}, or a proper list of such symbols.
The mime-type may also be @code{#f}, which means to remove
@var{extension} from the hash table.

If an entry does not validate, the operation throws an error,
with key @code{invalid-extension} or @code{invalid-mime-type}.

@c @twerpdoc (reset-mime-types!)
@c ../source/data/mime-types.doc
@deffn {Procedure} reset-mime-types! size
Clear all entries from the mime-types hash table,
and prepare it for @var{size} (approximately) entries.
This procedure must be called before any others in this module.
@end deffn
@c @twerpdoc (put-mime-types-from-file!)
@c ../source/data/mime-types.doc
@deffn {Procedure} put-mime-types-from-file! resolve filename
Open @var{filename} and parse its contents as ``mime-types'' format.
This line-oriented file format is briefly described as follows:

@itemize
@item Blank lines and lines beginning with @samp{#} are ignored.
@item Lines of the format @var{mime-type} (only one symbol) are ignored.
@item Otherwise, the line is expected to be in the format
@code{@var{mime-type} @var{extension} @var{extension}@dots{}},
that is, at least one @var{extension} must be present.  Each
@var{extension} results in an entry in the hash table.
@end itemize

Put those those entries that specify an extension into the hash
table, validating both extension and mime-type first.
@var{resolve} specifies how to resolve extension conflicts.
@end deffn
@c @twerpdoc (put-mime-types!)
@c ../source/data/mime-types.doc
@deffn {Procedure} put-mime-types! resolve [extension1 mime-type1 ...]
Put @var{extension1}/@var{mime-type1}@dots{} into the hash table,
validating both extension and mime-type first.
@var{resolve} specifies how to resolve extension conflicts.

If an extension is given but there is no mime-type
(i.e., the list has an odd length), throw an error
with key @code{missing-mime-type}.
@end deffn
@c @twerpdoc (mime-types<-extension)
@c ../source/data/mime-types.doc
@deffn {Procedure} mime-types<-extension ext
Return the mime-type(s) associated with @var{ext} (a symbol or
string), or @code{#f} if none are found.  Note that generally the
value may be a single mime-type or a list of them.
@end deffn
@c @twerpdoc (select-extensions)
@c ../source/data/mime-types.doc
@deffn {Procedure} select-extensions sel
Return a list of extensions in the hash table that match the
@var{sel} criteria (a symbol).  If @var{sel} is @code{#t}, return all
the extensions; if @code{single}, only those who have a single
mime-type associated; if @code{multiple}, only those who have more
than one mime-type associated.
@end deffn

@heading why @code{select-extensions}?
The last procedure is intended to ease non-generalizable merging,
without providing too much exposure to implementation internals.
Suppose you want to maintain a local policy of having only one mime-type
associated per extension (to keep things simple).  In that case, after
populating the hash, you can fix up those entries, like so:

@example
(reset-mime-types! 491)
(put-mime-types-from-file! 'prefix "/etc/mime.types")
(define AMBIGUOUS (select-extensions 'multiple))

(use-modules (ice-9 format))
(define (display-ext ext)
  (format #t "~7,@@A  ~A~%" ext (mime-types<-extension ext)))

(for-each display-ext AMBIGUOUS)
    ent  (chemical/x-ncbi-asn1-ascii chemical/x-pdb)
    sdf  (application/vnd.stardivision.math chemical/x-mdl-sdfile)
     sh  (application/x-sh text/x-sh)
    csh  (application/x-csh text/x-csh)
    cpt  (application/mac-compactpro image/x-corelphotopaint)
    asn  (chemical/x-ncbi-asn1 chemical/x-ncbi-asn1-spec)
    wrl  (model/vrml x-world/x-vrml)
    tcl  (application/x-tcl text/x-tcl)
     ra  (audio/x-pn-realaudio audio/x-realaudio)
    spl  (application/futuresplash application/x-futuresplash)
    m3u  (audio/mpegurl audio/x-mpegurl)

;; Local policy: For foo.wrl, we want the last variant,
;; but everything else we'll settle for the first.
(define ((keep! yes) ext)
  (put-mime-types!
   'stomp ext
   (yes (mime-types<-extension ext))))

((keep! reverse) 'wrl)
(for-each (keep! car) AMBIGUOUS)

(for-each display-ext AMBIGUOUS)
    asn  chemical/x-ncbi-asn1
    wrl  x-world/x-vrml
    tcl  application/x-tcl
     ra  audio/x-pn-realaudio
    spl  application/futuresplash
    m3u  audio/mpegurl
    ent  chemical/x-ncbi-asn1-ascii
    sdf  application/vnd.stardivision.math
     sh  application/x-sh
    csh  application/x-csh
    cpt  application/mac-compactpro
@end example

@noindent
Seasoned schemers will note that the same result could have been
achieved if @var{resolve} were allowed to be a general resolution
procedure instead of simply a method specifier.  Perhaps that feature
will be added in the future, and @code{select-extensions} replaced by
@code{map-mime-types}.  We'll see@dots{}

@c ---------------------------------------------------------------------------
@node       Procedure Index
@unnumbered Procedure Index

@noindent
This index references both procedures and messages for procedures (and/or
closures) that take messages.

@printindex fn

@c ---------------------------------------------------------------------------
@bye
