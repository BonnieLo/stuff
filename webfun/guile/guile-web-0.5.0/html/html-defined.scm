(begin (module-export! (current-module) (list (quote xhtml:a))) (define xhtml:a (non-empty-tag (quote a) (quote ()))) (define xhtml:a-end (non-empty-tag-end (quote a))) (module-export! (current-module) (list (quote xhtml:a-end))) (define xhtml:a-start (non-empty-tag-start (quote a) (quote ()))) (module-export! (current-module) (list (quote xhtml:a-start))))(begin (module-export! (current-module) (list (quote xhtml:abbr))) (define xhtml:abbr (non-empty-tag (quote abbr) (quote ()))) (define xhtml:abbr-end (non-empty-tag-end (quote abbr))) (module-export! (current-module) (list (quote xhtml:abbr-end))) (define xhtml:abbr-start (non-empty-tag-start (quote abbr) (quote ()))) (module-export! (current-module) (list (quote xhtml:abbr-start))))(begin (module-export! (current-module) (list (quote xhtml:acroynym))) (define xhtml:acroynym (non-empty-tag (quote acroynym) (quote ()))) (define xhtml:acroynym-end (non-empty-tag-end (quote acroynym))) (module-export! (current-module) (list (quote xhtml:acroynym-end))) (define xhtml:acroynym-start (non-empty-tag-start (quote acroynym) (quote ()))) (module-export! (current-module) (list (quote xhtml:acroynym-start))))(begin (module-export! (current-module) (list (quote xhtml:address))) (define xhtml:address (non-empty-tag (quote address) (quote ()))) (define xhtml:address-end (non-empty-tag-end (quote address))) (module-export! (current-module) (list (quote xhtml:address-end))) (define xhtml:address-start (non-empty-tag-start (quote address) (quote ()))) (module-export! (current-module) (list (quote xhtml:address-start))))(begin (module-export! (current-module) (list (quote xhtml:area))) (define xhtml:area (empty-tag (quote area) (quote ((alt "AREA"))))))(begin (module-export! (current-module) (list (quote xhtml:base))) (define xhtml:base (empty-tag (quote base) (quote ()))))(begin (module-export! (current-module) (list (quote xhtml:bdo))) (define xhtml:bdo (non-empty-tag (quote bdo) (quote ((dir "ltr"))))) (define xhtml:bdo-end (non-empty-tag-end (quote bdo))) (module-export! (current-module) (list (quote xhtml:bdo-end))) (define xhtml:bdo-start (non-empty-tag-start (quote bdo) (quote ((dir "ltr"))))) (module-export! (current-module) (list (quote xhtml:bdo-start))))(begin (module-export! (current-module) (list (quote xhtml:big))) (define xhtml:big (non-empty-tag (quote big) (quote ()))) (define xhtml:big-end (non-empty-tag-end (quote big))) (module-export! (current-module) (list (quote xhtml:big-end))) (define xhtml:big-start (non-empty-tag-start (quote big) (quote ()))) (module-export! (current-module) (list (quote xhtml:big-start))))(begin (module-export! (current-module) (list (quote xhtml:blockquote))) (define xhtml:blockquote (non-empty-tag (quote blockquote) (quote ()))) (define xhtml:blockquote-end (non-empty-tag-end (quote blockquote))) (module-export! (current-module) (list (quote xhtml:blockquote-end))) (define xhtml:blockquote-start (non-empty-tag-start (quote blockquote) (quote ()))) (module-export! (current-module) (list (quote xhtml:blockquote-start))))(begin (module-export! (current-module) (list (quote xhtml:body))) (define xhtml:body (non-empty-tag (quote body) (quote ()))) (define xhtml:body-end (non-empty-tag-end (quote body))) (module-export! (current-module) (list (quote xhtml:body-end))) (define xhtml:body-start (non-empty-tag-start (quote body) (quote ()))) (module-export! (current-module) (list (quote xhtml:body-start))))(begin (module-export! (current-module) (list (quote xhtml:br))) (define xhtml:br (empty-tag (quote br) (quote ()))))(begin (module-export! (current-module) (list (quote xhtml:button))) (define xhtml:button (non-empty-tag (quote button) (quote ()))) (define xhtml:button-end (non-empty-tag-end (quote button))) (module-export! (current-module) (list (quote xhtml:button-end))) (define xhtml:button-start (non-empty-tag-start (quote button) (quote ()))) (module-export! (current-module) (list (quote xhtml:button-start))))(begin (module-export! (current-module) (list (quote xhtml:caption))) (define xhtml:caption (non-empty-tag (quote caption) (quote ()))) (define xhtml:caption-end (non-empty-tag-end (quote caption))) (module-export! (current-module) (list (quote xhtml:caption-end))) (define xhtml:caption-start (non-empty-tag-start (quote caption) (quote ()))) (module-export! (current-module) (list (quote xhtml:caption-start))))(begin (module-export! (current-module) (list (quote xhtml:center))) (define xhtml:center (non-empty-tag (quote center) (quote ()))) (define xhtml:center-end (non-empty-tag-end (quote center))) (module-export! (current-module) (list (quote xhtml:center-end))) (define xhtml:center-start (non-empty-tag-start (quote center) (quote ()))) (module-export! (current-module) (list (quote xhtml:center-start))))(begin (module-export! (current-module) (list (quote xhtml:cite))) (define xhtml:cite (non-empty-tag (quote cite) (quote ()))) (define xhtml:cite-end (non-empty-tag-end (quote cite))) (module-export! (current-module) (list (quote xhtml:cite-end))) (define xhtml:cite-start (non-empty-tag-start (quote cite) (quote ()))) (module-export! (current-module) (list (quote xhtml:cite-start))))(begin (module-export! (current-module) (list (quote xhtml:code))) (define xhtml:code (non-empty-tag (quote code) (quote ()))) (define xhtml:code-end (non-empty-tag-end (quote code))) (module-export! (current-module) (list (quote xhtml:code-end))) (define xhtml:code-start (non-empty-tag-start (quote code) (quote ()))) (module-export! (current-module) (list (quote xhtml:code-start))))(begin (module-export! (current-module) (list (quote xhtml:col))) (define xhtml:col (empty-tag (quote col) (quote ()))))(begin (module-export! (current-module) (list (quote xhtml:colgroup))) (define xhtml:colgroup (non-empty-tag (quote colgroup) (quote ()))) (define xhtml:colgroup-end (non-empty-tag-end (quote colgroup))) (module-export! (current-module) (list (quote xhtml:colgroup-end))) (define xhtml:colgroup-start (non-empty-tag-start (quote colgroup) (quote ()))) (module-export! (current-module) (list (quote xhtml:colgroup-start))))(begin (module-export! (current-module) (list (quote xhtml:dd))) (define xhtml:dd (non-empty-tag (quote dd) (quote ()))) (define xhtml:dd-end (non-empty-tag-end (quote dd))) (module-export! (current-module) (list (quote xhtml:dd-end))) (define xhtml:dd-start (non-empty-tag-start (quote dd) (quote ()))) (module-export! (current-module) (list (quote xhtml:dd-start))))(begin (module-export! (current-module) (list (quote xhtml:del))) (define xhtml:del (non-empty-tag (quote del) (quote ()))) (define xhtml:del-end (non-empty-tag-end (quote del))) (module-export! (current-module) (list (quote xhtml:del-end))) (define xhtml:del-start (non-empty-tag-start (quote del) (quote ()))) (module-export! (current-module) (list (quote xhtml:del-start))))(begin (module-export! (current-module) (list (quote xhtml:dfn))) (define xhtml:dfn (non-empty-tag (quote dfn) (quote ()))) (define xhtml:dfn-end (non-empty-tag-end (quote dfn))) (module-export! (current-module) (list (quote xhtml:dfn-end))) (define xhtml:dfn-start (non-empty-tag-start (quote dfn) (quote ()))) (module-export! (current-module) (list (quote xhtml:dfn-start))))(begin (module-export! (current-module) (list (quote xhtml:div))) (define xhtml:div (non-empty-tag (quote div) (quote ()))) (define xhtml:div-end (non-empty-tag-end (quote div))) (module-export! (current-module) (list (quote xhtml:div-end))) (define xhtml:div-start (non-empty-tag-start (quote div) (quote ()))) (module-export! (current-module) (list (quote xhtml:div-start))))(begin (module-export! (current-module) (list (quote xhtml:dl))) (define xhtml:dl (non-empty-tag (quote dl) (quote ()))) (define xhtml:dl-end (non-empty-tag-end (quote dl))) (module-export! (current-module) (list (quote xhtml:dl-end))) (define xhtml:dl-start (non-empty-tag-start (quote dl) (quote ()))) (module-export! (current-module) (list (quote xhtml:dl-start))))(begin (module-export! (current-module) (list (quote xhtml:dt))) (define xhtml:dt (non-empty-tag (quote dt) (quote ()))) (define xhtml:dt-end (non-empty-tag-end (quote dt))) (module-export! (current-module) (list (quote xhtml:dt-end))) (define xhtml:dt-start (non-empty-tag-start (quote dt) (quote ()))) (module-export! (current-module) (list (quote xhtml:dt-start))))(begin (module-export! (current-module) (list (quote xhtml:em))) (define xhtml:em (non-empty-tag (quote em) (quote ()))) (define xhtml:em-end (non-empty-tag-end (quote em))) (module-export! (current-module) (list (quote xhtml:em-end))) (define xhtml:em-start (non-empty-tag-start (quote em) (quote ()))) (module-export! (current-module) (list (quote xhtml:em-start))))(begin (module-export! (current-module) (list (quote xhtml:fieldset))) (define xhtml:fieldset (non-empty-tag (quote fieldset) (quote ()))) (define xhtml:fieldset-end (non-empty-tag-end (quote fieldset))) (module-export! (current-module) (list (quote xhtml:fieldset-end))) (define xhtml:fieldset-start (non-empty-tag-start (quote fieldset) (quote ()))) (module-export! (current-module) (list (quote xhtml:fieldset-start))))(begin (module-export! (current-module) (list (quote xhtml:form))) (define xhtml:form (non-empty-tag (quote form) (quote ((action "!!unset!!"))))) (define xhtml:form-end (non-empty-tag-end (quote form))) (module-export! (current-module) (list (quote xhtml:form-end))) (define xhtml:form-start (non-empty-tag-start (quote form) (quote ((action "!!unset!!"))))) (module-export! (current-module) (list (quote xhtml:form-start))))(begin (module-export! (current-module) (list (quote xhtml:frame))) (define xhtml:frame (empty-tag (quote frame) (quote ()))))(begin (module-export! (current-module) (list (quote xhtml:frameset))) (define xhtml:frameset (non-empty-tag (quote frameset) (quote ()))) (define xhtml:frameset-end (non-empty-tag-end (quote frameset))) (module-export! (current-module) (list (quote xhtml:frameset-end))) (define xhtml:frameset-start (non-empty-tag-start (quote frameset) (quote ()))) (module-export! (current-module) (list (quote xhtml:frameset-start))))(begin (module-export! (current-module) (list (quote xhtml:h1))) (define xhtml:h1 (non-empty-tag (quote h1) (quote ()))) (define xhtml:h1-end (non-empty-tag-end (quote h1))) (module-export! (current-module) (list (quote xhtml:h1-end))) (define xhtml:h1-start (non-empty-tag-start (quote h1) (quote ()))) (module-export! (current-module) (list (quote xhtml:h1-start))))(begin (module-export! (current-module) (list (quote xhtml:h2))) (define xhtml:h2 (non-empty-tag (quote h2) (quote ()))) (define xhtml:h2-end (non-empty-tag-end (quote h2))) (module-export! (current-module) (list (quote xhtml:h2-end))) (define xhtml:h2-start (non-empty-tag-start (quote h2) (quote ()))) (module-export! (current-module) (list (quote xhtml:h2-start))))(begin (module-export! (current-module) (list (quote xhtml:h3))) (define xhtml:h3 (non-empty-tag (quote h3) (quote ()))) (define xhtml:h3-end (non-empty-tag-end (quote h3))) (module-export! (current-module) (list (quote xhtml:h3-end))) (define xhtml:h3-start (non-empty-tag-start (quote h3) (quote ()))) (module-export! (current-module) (list (quote xhtml:h3-start))))(begin (module-export! (current-module) (list (quote xhtml:h4))) (define xhtml:h4 (non-empty-tag (quote h4) (quote ()))) (define xhtml:h4-end (non-empty-tag-end (quote h4))) (module-export! (current-module) (list (quote xhtml:h4-end))) (define xhtml:h4-start (non-empty-tag-start (quote h4) (quote ()))) (module-export! (current-module) (list (quote xhtml:h4-start))))(begin (module-export! (current-module) (list (quote xhtml:h5))) (define xhtml:h5 (non-empty-tag (quote h5) (quote ()))) (define xhtml:h5-end (non-empty-tag-end (quote h5))) (module-export! (current-module) (list (quote xhtml:h5-end))) (define xhtml:h5-start (non-empty-tag-start (quote h5) (quote ()))) (module-export! (current-module) (list (quote xhtml:h5-start))))(begin (module-export! (current-module) (list (quote xhtml:h6))) (define xhtml:h6 (non-empty-tag (quote h6) (quote ()))) (define xhtml:h6-end (non-empty-tag-end (quote h6))) (module-export! (current-module) (list (quote xhtml:h6-end))) (define xhtml:h6-start (non-empty-tag-start (quote h6) (quote ()))) (module-export! (current-module) (list (quote xhtml:h6-start))))(begin (module-export! (current-module) (list (quote xhtml:head))) (define xhtml:head (non-empty-tag (quote head) (quote ()))) (define xhtml:head-end (non-empty-tag-end (quote head))) (module-export! (current-module) (list (quote xhtml:head-end))) (define xhtml:head-start (non-empty-tag-start (quote head) (quote ()))) (module-export! (current-module) (list (quote xhtml:head-start))))(begin (module-export! (current-module) (list (quote xhtml:hr))) (define xhtml:hr (empty-tag (quote hr) (quote ()))))(begin (module-export! (current-module) (list (quote xhtml:html))) (define xhtml:html (non-empty-tag (quote html) (quote ((xml:lang "en") (lang "en"))))) (define xhtml:html-end (non-empty-tag-end (quote html))) (module-export! (current-module) (list (quote xhtml:html-end))) (define xhtml:html-start (non-empty-tag-start (quote html) (quote ((xml:lang "en") (lang "en"))))) (module-export! (current-module) (list (quote xhtml:html-start))))(begin (module-export! (current-module) (list (quote xhtml:i))) (define xhtml:i (non-empty-tag (quote i) (quote ()))) (define xhtml:i-end (non-empty-tag-end (quote i))) (module-export! (current-module) (list (quote xhtml:i-end))) (define xhtml:i-start (non-empty-tag-start (quote i) (quote ()))) (module-export! (current-module) (list (quote xhtml:i-start))))(begin (module-export! (current-module) (list (quote xhtml:iframe))) (define xhtml:iframe (non-empty-tag (quote iframe) (quote ()))) (define xhtml:iframe-end (non-empty-tag-end (quote iframe))) (module-export! (current-module) (list (quote xhtml:iframe-end))) (define xhtml:iframe-start (non-empty-tag-start (quote iframe) (quote ()))) (module-export! (current-module) (list (quote xhtml:iframe-start))))(begin (module-export! (current-module) (list (quote xhtml:img))) (define xhtml:img (empty-tag (quote img) (quote ((src "") (alt "[unset alt text]"))))))(begin (module-export! (current-module) (list (quote xhtml:input))) (define xhtml:input (empty-tag (quote input) (quote ()))))(begin (module-export! (current-module) (list (quote xhtml:ins))) (define xhtml:ins (non-empty-tag (quote ins) (quote ()))) (define xhtml:ins-end (non-empty-tag-end (quote ins))) (module-export! (current-module) (list (quote xhtml:ins-end))) (define xhtml:ins-start (non-empty-tag-start (quote ins) (quote ()))) (module-export! (current-module) (list (quote xhtml:ins-start))))(begin (module-export! (current-module) (list (quote xhtml:kbd))) (define xhtml:kbd (non-empty-tag (quote kbd) (quote ()))) (define xhtml:kbd-end (non-empty-tag-end (quote kbd))) (module-export! (current-module) (list (quote xhtml:kbd-end))) (define xhtml:kbd-start (non-empty-tag-start (quote kbd) (quote ()))) (module-export! (current-module) (list (quote xhtml:kbd-start))))(begin (module-export! (current-module) (list (quote xhtml:label))) (define xhtml:label (non-empty-tag (quote label) (quote ()))) (define xhtml:label-end (non-empty-tag-end (quote label))) (module-export! (current-module) (list (quote xhtml:label-end))) (define xhtml:label-start (non-empty-tag-start (quote label) (quote ()))) (module-export! (current-module) (list (quote xhtml:label-start))))(begin (module-export! (current-module) (list (quote xhtml:legend))) (define xhtml:legend (non-empty-tag (quote legend) (quote ()))) (define xhtml:legend-end (non-empty-tag-end (quote legend))) (module-export! (current-module) (list (quote xhtml:legend-end))) (define xhtml:legend-start (non-empty-tag-start (quote legend) (quote ()))) (module-export! (current-module) (list (quote xhtml:legend-start))))(begin (module-export! (current-module) (list (quote xhtml:li))) (define xhtml:li (non-empty-tag (quote li) (quote ()))) (define xhtml:li-end (non-empty-tag-end (quote li))) (module-export! (current-module) (list (quote xhtml:li-end))) (define xhtml:li-start (non-empty-tag-start (quote li) (quote ()))) (module-export! (current-module) (list (quote xhtml:li-start))))(begin (module-export! (current-module) (list (quote xhtml:link))) (define xhtml:link (empty-tag (quote link) (quote ()))))(begin (module-export! (current-module) (list (quote xhtml:map))) (define xhtml:map (non-empty-tag (quote map) (quote ((name "name unset"))))) (define xhtml:map-end (non-empty-tag-end (quote map))) (module-export! (current-module) (list (quote xhtml:map-end))) (define xhtml:map-start (non-empty-tag-start (quote map) (quote ((name "name unset"))))) (module-export! (current-module) (list (quote xhtml:map-start))))(begin (module-export! (current-module) (list (quote xhtml:meta))) (define xhtml:meta (empty-tag (quote meta) (quote ((content "content unset"))))))(begin (module-export! (current-module) (list (quote xhtml:noframes))) (define xhtml:noframes (non-empty-tag (quote noframes) (quote ()))) (define xhtml:noframes-end (non-empty-tag-end (quote noframes))) (module-export! (current-module) (list (quote xhtml:noframes-end))) (define xhtml:noframes-start (non-empty-tag-start (quote noframes) (quote ()))) (module-export! (current-module) (list (quote xhtml:noframes-start))))(begin (module-export! (current-module) (list (quote xhtml:noscript))) (define xhtml:noscript (non-empty-tag (quote noscript) (quote ()))) (define xhtml:noscript-end (non-empty-tag-end (quote noscript))) (module-export! (current-module) (list (quote xhtml:noscript-end))) (define xhtml:noscript-start (non-empty-tag-start (quote noscript) (quote ()))) (module-export! (current-module) (list (quote xhtml:noscript-start))))(begin (module-export! (current-module) (list (quote xhtml:object))) (define xhtml:object (non-empty-tag (quote object) (quote ()))) (define xhtml:object-end (non-empty-tag-end (quote object))) (module-export! (current-module) (list (quote xhtml:object-end))) (define xhtml:object-start (non-empty-tag-start (quote object) (quote ()))) (module-export! (current-module) (list (quote xhtml:object-start))))(begin (module-export! (current-module) (list (quote xhtml:ol))) (define xhtml:ol (non-empty-tag (quote ol) (quote ()))) (define xhtml:ol-end (non-empty-tag-end (quote ol))) (module-export! (current-module) (list (quote xhtml:ol-end))) (define xhtml:ol-start (non-empty-tag-start (quote ol) (quote ()))) (module-export! (current-module) (list (quote xhtml:ol-start))))(begin (module-export! (current-module) (list (quote xhtml:optgroup))) (define xhtml:optgroup (non-empty-tag (quote optgroup) (quote ((label "label unset"))))) (define xhtml:optgroup-end (non-empty-tag-end (quote optgroup))) (module-export! (current-module) (list (quote xhtml:optgroup-end))) (define xhtml:optgroup-start (non-empty-tag-start (quote optgroup) (quote ((label "label unset"))))) (module-export! (current-module) (list (quote xhtml:optgroup-start))))(begin (module-export! (current-module) (list (quote xhtml:option))) (define xhtml:option (non-empty-tag (quote option) (quote ()))) (define xhtml:option-end (non-empty-tag-end (quote option))) (module-export! (current-module) (list (quote xhtml:option-end))) (define xhtml:option-start (non-empty-tag-start (quote option) (quote ()))) (module-export! (current-module) (list (quote xhtml:option-start))))(begin (module-export! (current-module) (list (quote xhtml:p))) (define xhtml:p (non-empty-tag (quote p) (quote ()))) (define xhtml:p-end (non-empty-tag-end (quote p))) (module-export! (current-module) (list (quote xhtml:p-end))) (define xhtml:p-start (non-empty-tag-start (quote p) (quote ()))) (module-export! (current-module) (list (quote xhtml:p-start))))(begin (module-export! (current-module) (list (quote xhtml:param))) (define xhtml:param (empty-tag (quote param) (quote ((name "unset name"))))))(begin (module-export! (current-module) (list (quote xhtml:pre))) (define xhtml:pre (non-empty-tag (quote pre) (quote ()))) (define xhtml:pre-end (non-empty-tag-end (quote pre))) (module-export! (current-module) (list (quote xhtml:pre-end))) (define xhtml:pre-start (non-empty-tag-start (quote pre) (quote ()))) (module-export! (current-module) (list (quote xhtml:pre-start))))(begin (module-export! (current-module) (list (quote xhtml:q))) (define xhtml:q (non-empty-tag (quote q) (quote ()))) (define xhtml:q-end (non-empty-tag-end (quote q))) (module-export! (current-module) (list (quote xhtml:q-end))) (define xhtml:q-start (non-empty-tag-start (quote q) (quote ()))) (module-export! (current-module) (list (quote xhtml:q-start))))(begin (module-export! (current-module) (list (quote xhtml:samp))) (define xhtml:samp (non-empty-tag (quote samp) (quote ()))) (define xhtml:samp-end (non-empty-tag-end (quote samp))) (module-export! (current-module) (list (quote xhtml:samp-end))) (define xhtml:samp-start (non-empty-tag-start (quote samp) (quote ()))) (module-export! (current-module) (list (quote xhtml:samp-start))))(begin (module-export! (current-module) (list (quote xhtml:script))) (define xhtml:script (non-empty-tag (quote script) (quote ((type "text/javascript"))))) (define xhtml:script-end (non-empty-tag-end (quote script))) (module-export! (current-module) (list (quote xhtml:script-end))) (define xhtml:script-start (non-empty-tag-start (quote script) (quote ((type "text/javascript"))))) (module-export! (current-module) (list (quote xhtml:script-start))))(begin (module-export! (current-module) (list (quote xhtml:select))) (define xhtml:select (non-empty-tag (quote select) (quote ()))) (define xhtml:select-end (non-empty-tag-end (quote select))) (module-export! (current-module) (list (quote xhtml:select-end))) (define xhtml:select-start (non-empty-tag-start (quote select) (quote ()))) (module-export! (current-module) (list (quote xhtml:select-start))))(begin (module-export! (current-module) (list (quote xhtml:small))) (define xhtml:small (non-empty-tag (quote small) (quote ()))) (define xhtml:small-end (non-empty-tag-end (quote small))) (module-export! (current-module) (list (quote xhtml:small-end))) (define xhtml:small-start (non-empty-tag-start (quote small) (quote ()))) (module-export! (current-module) (list (quote xhtml:small-start))))(begin (module-export! (current-module) (list (quote xhtml:span))) (define xhtml:span (non-empty-tag (quote span) (quote ()))) (define xhtml:span-end (non-empty-tag-end (quote span))) (module-export! (current-module) (list (quote xhtml:span-end))) (define xhtml:span-start (non-empty-tag-start (quote span) (quote ()))) (module-export! (current-module) (list (quote xhtml:span-start))))(begin (module-export! (current-module) (list (quote xhtml:strong))) (define xhtml:strong (non-empty-tag (quote strong) (quote ()))) (define xhtml:strong-end (non-empty-tag-end (quote strong))) (module-export! (current-module) (list (quote xhtml:strong-end))) (define xhtml:strong-start (non-empty-tag-start (quote strong) (quote ()))) (module-export! (current-module) (list (quote xhtml:strong-start))))(begin (module-export! (current-module) (list (quote xhtml:style))) (define xhtml:style (non-empty-tag (quote style) (quote ((type "text/css"))))) (define xhtml:style-end (non-empty-tag-end (quote style))) (module-export! (current-module) (list (quote xhtml:style-end))) (define xhtml:style-start (non-empty-tag-start (quote style) (quote ((type "text/css"))))) (module-export! (current-module) (list (quote xhtml:style-start))))(begin (module-export! (current-module) (list (quote xhtml:sub))) (define xhtml:sub (non-empty-tag (quote sub) (quote ()))) (define xhtml:sub-end (non-empty-tag-end (quote sub))) (module-export! (current-module) (list (quote xhtml:sub-end))) (define xhtml:sub-start (non-empty-tag-start (quote sub) (quote ()))) (module-export! (current-module) (list (quote xhtml:sub-start))))(begin (module-export! (current-module) (list (quote xhtml:sup))) (define xhtml:sup (non-empty-tag (quote sup) (quote ()))) (define xhtml:sup-end (non-empty-tag-end (quote sup))) (module-export! (current-module) (list (quote xhtml:sup-end))) (define xhtml:sup-start (non-empty-tag-start (quote sup) (quote ()))) (module-export! (current-module) (list (quote xhtml:sup-start))))(begin (module-export! (current-module) (list (quote xhtml:table))) (define xhtml:table (non-empty-tag (quote table) (quote ()))) (define xhtml:table-end (non-empty-tag-end (quote table))) (module-export! (current-module) (list (quote xhtml:table-end))) (define xhtml:table-start (non-empty-tag-start (quote table) (quote ()))) (module-export! (current-module) (list (quote xhtml:table-start))))(begin (module-export! (current-module) (list (quote xhtml:tbody))) (define xhtml:tbody (non-empty-tag (quote tbody) (quote ()))) (define xhtml:tbody-end (non-empty-tag-end (quote tbody))) (module-export! (current-module) (list (quote xhtml:tbody-end))) (define xhtml:tbody-start (non-empty-tag-start (quote tbody) (quote ()))) (module-export! (current-module) (list (quote xhtml:tbody-start))))(begin (module-export! (current-module) (list (quote xhtml:td))) (define xhtml:td (non-empty-tag (quote td) (quote ()))) (define xhtml:td-end (non-empty-tag-end (quote td))) (module-export! (current-module) (list (quote xhtml:td-end))) (define xhtml:td-start (non-empty-tag-start (quote td) (quote ()))) (module-export! (current-module) (list (quote xhtml:td-start))))(begin (module-export! (current-module) (list (quote xhtml:textarea))) (define xhtml:textarea (non-empty-tag (quote textarea) (quote ((rows "20") (cols "20"))))) (define xhtml:textarea-end (non-empty-tag-end (quote textarea))) (module-export! (current-module) (list (quote xhtml:textarea-end))) (define xhtml:textarea-start (non-empty-tag-start (quote textarea) (quote ((rows "20") (cols "20"))))) (module-export! (current-module) (list (quote xhtml:textarea-start))))(begin (module-export! (current-module) (list (quote xhtml:tfoot))) (define xhtml:tfoot (non-empty-tag (quote tfoot) (quote ()))) (define xhtml:tfoot-end (non-empty-tag-end (quote tfoot))) (module-export! (current-module) (list (quote xhtml:tfoot-end))) (define xhtml:tfoot-start (non-empty-tag-start (quote tfoot) (quote ()))) (module-export! (current-module) (list (quote xhtml:tfoot-start))))(begin (module-export! (current-module) (list (quote xhtml:th))) (define xhtml:th (non-empty-tag (quote th) (quote ()))) (define xhtml:th-end (non-empty-tag-end (quote th))) (module-export! (current-module) (list (quote xhtml:th-end))) (define xhtml:th-start (non-empty-tag-start (quote th) (quote ()))) (module-export! (current-module) (list (quote xhtml:th-start))))(begin (module-export! (current-module) (list (quote xhtml:thead))) (define xhtml:thead (non-empty-tag (quote thead) (quote ()))) (define xhtml:thead-end (non-empty-tag-end (quote thead))) (module-export! (current-module) (list (quote xhtml:thead-end))) (define xhtml:thead-start (non-empty-tag-start (quote thead) (quote ()))) (module-export! (current-module) (list (quote xhtml:thead-start))))(begin (module-export! (current-module) (list (quote xhtml:title))) (define xhtml:title (non-empty-tag (quote title) (quote ()))) (define xhtml:title-end (non-empty-tag-end (quote title))) (module-export! (current-module) (list (quote xhtml:title-end))) (define xhtml:title-start (non-empty-tag-start (quote title) (quote ()))) (module-export! (current-module) (list (quote xhtml:title-start))))(begin (module-export! (current-module) (list (quote xhtml:tr))) (define xhtml:tr (non-empty-tag (quote tr) (quote ()))) (define xhtml:tr-end (non-empty-tag-end (quote tr))) (module-export! (current-module) (list (quote xhtml:tr-end))) (define xhtml:tr-start (non-empty-tag-start (quote tr) (quote ()))) (module-export! (current-module) (list (quote xhtml:tr-start))))(begin (module-export! (current-module) (list (quote xhtml:tt))) (define xhtml:tt (non-empty-tag (quote tt) (quote ()))) (define xhtml:tt-end (non-empty-tag-end (quote tt))) (module-export! (current-module) (list (quote xhtml:tt-end))) (define xhtml:tt-start (non-empty-tag-start (quote tt) (quote ()))) (module-export! (current-module) (list (quote xhtml:tt-start))))(begin (module-export! (current-module) (list (quote xhtml:ul))) (define xhtml:ul (non-empty-tag (quote ul) (quote ()))) (define xhtml:ul-end (non-empty-tag-end (quote ul))) (module-export! (current-module) (list (quote xhtml:ul-end))) (define xhtml:ul-start (non-empty-tag-start (quote ul) (quote ()))) (module-export! (current-module) (list (quote xhtml:ul-start))))(begin (module-export! (current-module) (list (quote xhtml:var))) (define xhtml:var (non-empty-tag (quote var) (quote ()))) (define xhtml:var-end (non-empty-tag-end (quote var))) (module-export! (current-module) (list (quote xhtml:var-end))) (define xhtml:var-start (non-empty-tag-start (quote var) (quote ()))) (module-export! (current-module) (list (quote xhtml:var-start))))
