// File: fpga_synth.v
// Generated by MyHDL 0.7
// Date: Tue May 14 07:37:42 2013


`timescale 1ns/10ps

module fpga_synth (
    clk,
    param_data,
    param_clk,
    audio_req,
    audio_ack,
    dac_bit
);


input clk;
input [3:0] param_data;
input param_clk;
output audio_req;
wire audio_req;
input audio_ack;
output dac_bit;
reg dac_bit;

reg audio_tick;
wire [3:0] a;
wire [13:0] out2;
reg [23:0] param_counter;
wire [3:0] d;
wire [3:0] b;
reg areq_bit;
wire [3:0] c;
wire [13:0] out3;
wire [13:0] out4;
reg [15:0] audio_counter;
wire [13:0] out1;
wire [13:0] _output;
reg param_tick;
wire [3:0] drivers_7_a;
wire [3:0] drivers_7_c;
wire drivers_7_chorusing;
wire [3:0] drivers_7_d;
wire [3:0] drivers_7_decay;
wire [15:0] drivers_7_envelope;
wire [3:0] drivers_7__release;
wire [23:0] drivers_7_dphase;
wire [3:0] drivers_7_attack;
wire [7:0] drivers_7_controls;
reg [13:0] drivers_7_middle;
wire [3:0] drivers_7_b;
wire [3:0] drivers_7_sustain;
wire drivers_7_keydown;
reg [13:0] drivers_7_amplitude;
wire [13:0] drivers_7_threshold;
wire [1:0] drivers_7_select;
wire [35:0] drivers_7_drivers_9_ab;
reg [5:0] drivers_7_drivers_8_lcount;
reg [35:0] drivers_7_drivers_8_q;
reg [1:0] drivers_7_drivers_8_state;
reg [35:0] drivers_7_drivers_8_dq;
reg drivers_7_drivers_8_sign_bit;
reg [15:0] drivers_7_drivers_7_noise_register;
reg [13:0] drivers_7_drivers_7_output2;
reg [13:0] drivers_7_drivers_7_output3;
reg [13:0] drivers_7_drivers_7_output0;
reg [13:0] drivers_7_drivers_7_output1;
reg [23:0] drivers_7_drivers_7_dphase1;
reg [23:0] drivers_7_drivers_7_dphase2;
reg [23:0] drivers_7_drivers_7_dphase3;
reg [23:0] drivers_7_drivers_7_w3_phase_counter;
reg [23:0] drivers_7_drivers_7_w2_phase_counter;
reg [23:0] drivers_7_drivers_7_w1_phase_counter;
reg [23:0] drivers_7_drivers_7_w0_phase_counter;
wire [7:0] drivers_7_drivers_5_a;
wire [3:0] drivers_7_drivers_5_q;
wire [7:0] drivers_7_drivers_5_b;
wire [3:0] drivers_7_drivers_5_pb_a;
wire [3:0] drivers_7_drivers_5_pb_q;
wire [3:0] drivers_7_drivers_5_pb_b;
reg [3:0] drivers_7_drivers_5_pb_nibble1_q;
reg [3:0] drivers_7_drivers_5_pb_nibble1_r;
reg [3:0] drivers_7_drivers_5_pb_nibble0_q;
reg [3:0] drivers_7_drivers_5_pb_nibble0_r;
wire [3:0] drivers_7_drivers_5_pa_a;
wire [3:0] drivers_7_drivers_5_pa_q;
wire [3:0] drivers_7_drivers_5_pa_b;
reg [3:0] drivers_7_drivers_5_pa_nibble1_q;
reg [3:0] drivers_7_drivers_5_pa_nibble1_r;
reg [3:0] drivers_7_drivers_5_pa_nibble0_q;
reg [3:0] drivers_7_drivers_5_pa_nibble0_r;
wire [3:0] drivers_7_drivers_3_a;
wire [3:0] drivers_7_drivers_3_q;
wire [3:0] drivers_7_drivers_3_b;
reg [3:0] drivers_7_drivers_3_nibble1_q;
reg [3:0] drivers_7_drivers_3_nibble1_r;
reg [3:0] drivers_7_drivers_3_nibble0_q;
reg [3:0] drivers_7_drivers_3_nibble0_r;
wire [7:0] drivers_7_drivers_2_a;
wire [3:0] drivers_7_drivers_2_q;
wire [7:0] drivers_7_drivers_2_b;
wire [3:0] drivers_7_drivers_2_pb_a;
wire [3:0] drivers_7_drivers_2_pb_q;
wire [3:0] drivers_7_drivers_2_pb_b;
reg [3:0] drivers_7_drivers_2_pb_nibble1_q;
reg [3:0] drivers_7_drivers_2_pb_nibble1_r;
reg [3:0] drivers_7_drivers_2_pb_nibble0_q;
reg [3:0] drivers_7_drivers_2_pb_nibble0_r;
wire [3:0] drivers_7_drivers_2_pa_a;
wire [3:0] drivers_7_drivers_2_pa_q;
wire [3:0] drivers_7_drivers_2_pa_b;
reg [3:0] drivers_7_drivers_2_pa_nibble1_q;
reg [3:0] drivers_7_drivers_2_pa_nibble1_r;
reg [3:0] drivers_7_drivers_2_pa_nibble0_q;
reg [3:0] drivers_7_drivers_2_pa_nibble0_r;
wire [15:0] drivers_7_drivers_1_a;
wire [3:0] drivers_7_drivers_1_q;
wire [7:0] drivers_7_drivers_1_b;
wire [3:0] drivers_7_drivers_1_pb_a;
wire [3:0] drivers_7_drivers_1_pb_q;
wire [3:0] drivers_7_drivers_1_pb_b;
reg [3:0] drivers_7_drivers_1_pb_nibble1_q;
reg [3:0] drivers_7_drivers_1_pb_nibble1_r;
reg [3:0] drivers_7_drivers_1_pb_nibble0_q;
reg [3:0] drivers_7_drivers_1_pb_nibble0_r;
wire [7:0] drivers_7_drivers_1_pa_a;
wire [3:0] drivers_7_drivers_1_pa_q;
wire [7:0] drivers_7_drivers_1_pa_b;
wire [3:0] drivers_7_drivers_1_pa_pb_a;
wire [3:0] drivers_7_drivers_1_pa_pb_q;
wire [3:0] drivers_7_drivers_1_pa_pb_b;
reg [3:0] drivers_7_drivers_1_pa_pb_nibble1_q;
reg [3:0] drivers_7_drivers_1_pa_pb_nibble1_r;
reg [3:0] drivers_7_drivers_1_pa_pb_nibble0_q;
reg [3:0] drivers_7_drivers_1_pa_pb_nibble0_r;
wire [3:0] drivers_7_drivers_1_pa_pa_a;
wire [3:0] drivers_7_drivers_1_pa_pa_q;
wire [3:0] drivers_7_drivers_1_pa_pa_b;
reg [3:0] drivers_7_drivers_1_pa_pa_nibble1_q;
reg [3:0] drivers_7_drivers_1_pa_pa_nibble1_r;
reg [3:0] drivers_7_drivers_1_pa_pa_nibble0_q;
reg [3:0] drivers_7_drivers_1_pa_pa_nibble0_r;
wire [3:0] drivers_6_a;
wire [3:0] drivers_6_c;
wire drivers_6_chorusing;
wire [3:0] drivers_6_d;
wire [3:0] drivers_6_decay;
wire [15:0] drivers_6_envelope;
wire [3:0] drivers_6__release;
wire [23:0] drivers_6_dphase;
wire [3:0] drivers_6_attack;
wire [7:0] drivers_6_controls;
reg [13:0] drivers_6_middle;
wire [3:0] drivers_6_b;
wire [3:0] drivers_6_sustain;
wire drivers_6_keydown;
reg [13:0] drivers_6_amplitude;
wire [13:0] drivers_6_threshold;
wire [1:0] drivers_6_select;
wire [35:0] drivers_6_drivers_9_ab;
reg [5:0] drivers_6_drivers_8_lcount;
reg [35:0] drivers_6_drivers_8_q;
reg [1:0] drivers_6_drivers_8_state;
reg [35:0] drivers_6_drivers_8_dq;
reg drivers_6_drivers_8_sign_bit;
reg [15:0] drivers_6_drivers_7_noise_register;
reg [13:0] drivers_6_drivers_7_output2;
reg [13:0] drivers_6_drivers_7_output3;
reg [13:0] drivers_6_drivers_7_output0;
reg [13:0] drivers_6_drivers_7_output1;
reg [23:0] drivers_6_drivers_7_dphase1;
reg [23:0] drivers_6_drivers_7_dphase2;
reg [23:0] drivers_6_drivers_7_dphase3;
reg [23:0] drivers_6_drivers_7_w3_phase_counter;
reg [23:0] drivers_6_drivers_7_w2_phase_counter;
reg [23:0] drivers_6_drivers_7_w1_phase_counter;
reg [23:0] drivers_6_drivers_7_w0_phase_counter;
wire [7:0] drivers_6_drivers_5_a;
wire [3:0] drivers_6_drivers_5_q;
wire [7:0] drivers_6_drivers_5_b;
wire [3:0] drivers_6_drivers_5_pb_a;
wire [3:0] drivers_6_drivers_5_pb_q;
wire [3:0] drivers_6_drivers_5_pb_b;
reg [3:0] drivers_6_drivers_5_pb_nibble1_q;
reg [3:0] drivers_6_drivers_5_pb_nibble1_r;
reg [3:0] drivers_6_drivers_5_pb_nibble0_q;
reg [3:0] drivers_6_drivers_5_pb_nibble0_r;
wire [3:0] drivers_6_drivers_5_pa_a;
wire [3:0] drivers_6_drivers_5_pa_q;
wire [3:0] drivers_6_drivers_5_pa_b;
reg [3:0] drivers_6_drivers_5_pa_nibble1_q;
reg [3:0] drivers_6_drivers_5_pa_nibble1_r;
reg [3:0] drivers_6_drivers_5_pa_nibble0_q;
reg [3:0] drivers_6_drivers_5_pa_nibble0_r;
wire [3:0] drivers_6_drivers_3_a;
wire [3:0] drivers_6_drivers_3_q;
wire [3:0] drivers_6_drivers_3_b;
reg [3:0] drivers_6_drivers_3_nibble1_q;
reg [3:0] drivers_6_drivers_3_nibble1_r;
reg [3:0] drivers_6_drivers_3_nibble0_q;
reg [3:0] drivers_6_drivers_3_nibble0_r;
wire [7:0] drivers_6_drivers_2_a;
wire [3:0] drivers_6_drivers_2_q;
wire [7:0] drivers_6_drivers_2_b;
wire [3:0] drivers_6_drivers_2_pb_a;
wire [3:0] drivers_6_drivers_2_pb_q;
wire [3:0] drivers_6_drivers_2_pb_b;
reg [3:0] drivers_6_drivers_2_pb_nibble1_q;
reg [3:0] drivers_6_drivers_2_pb_nibble1_r;
reg [3:0] drivers_6_drivers_2_pb_nibble0_q;
reg [3:0] drivers_6_drivers_2_pb_nibble0_r;
wire [3:0] drivers_6_drivers_2_pa_a;
wire [3:0] drivers_6_drivers_2_pa_q;
wire [3:0] drivers_6_drivers_2_pa_b;
reg [3:0] drivers_6_drivers_2_pa_nibble1_q;
reg [3:0] drivers_6_drivers_2_pa_nibble1_r;
reg [3:0] drivers_6_drivers_2_pa_nibble0_q;
reg [3:0] drivers_6_drivers_2_pa_nibble0_r;
wire [15:0] drivers_6_drivers_1_a;
wire [3:0] drivers_6_drivers_1_q;
wire [7:0] drivers_6_drivers_1_b;
wire [3:0] drivers_6_drivers_1_pb_a;
wire [3:0] drivers_6_drivers_1_pb_q;
wire [3:0] drivers_6_drivers_1_pb_b;
reg [3:0] drivers_6_drivers_1_pb_nibble1_q;
reg [3:0] drivers_6_drivers_1_pb_nibble1_r;
reg [3:0] drivers_6_drivers_1_pb_nibble0_q;
reg [3:0] drivers_6_drivers_1_pb_nibble0_r;
wire [7:0] drivers_6_drivers_1_pa_a;
wire [3:0] drivers_6_drivers_1_pa_q;
wire [7:0] drivers_6_drivers_1_pa_b;
wire [3:0] drivers_6_drivers_1_pa_pb_a;
wire [3:0] drivers_6_drivers_1_pa_pb_q;
wire [3:0] drivers_6_drivers_1_pa_pb_b;
reg [3:0] drivers_6_drivers_1_pa_pb_nibble1_q;
reg [3:0] drivers_6_drivers_1_pa_pb_nibble1_r;
reg [3:0] drivers_6_drivers_1_pa_pb_nibble0_q;
reg [3:0] drivers_6_drivers_1_pa_pb_nibble0_r;
wire [3:0] drivers_6_drivers_1_pa_pa_a;
wire [3:0] drivers_6_drivers_1_pa_pa_q;
wire [3:0] drivers_6_drivers_1_pa_pa_b;
reg [3:0] drivers_6_drivers_1_pa_pa_nibble1_q;
reg [3:0] drivers_6_drivers_1_pa_pa_nibble1_r;
reg [3:0] drivers_6_drivers_1_pa_pa_nibble0_q;
reg [3:0] drivers_6_drivers_1_pa_pa_nibble0_r;
wire [3:0] drivers_5_a;
wire [3:0] drivers_5_c;
wire drivers_5_chorusing;
wire [3:0] drivers_5_d;
wire [3:0] drivers_5_decay;
wire [15:0] drivers_5_envelope;
wire [3:0] drivers_5__release;
wire [23:0] drivers_5_dphase;
wire [3:0] drivers_5_attack;
wire [7:0] drivers_5_controls;
reg [13:0] drivers_5_middle;
wire [3:0] drivers_5_b;
wire [3:0] drivers_5_sustain;
wire drivers_5_keydown;
reg [13:0] drivers_5_amplitude;
wire [13:0] drivers_5_threshold;
wire [1:0] drivers_5_select;
wire [35:0] drivers_5_drivers_9_ab;
reg [5:0] drivers_5_drivers_8_lcount;
reg [35:0] drivers_5_drivers_8_q;
reg [1:0] drivers_5_drivers_8_state;
reg [35:0] drivers_5_drivers_8_dq;
reg drivers_5_drivers_8_sign_bit;
reg [15:0] drivers_5_drivers_7_noise_register;
reg [13:0] drivers_5_drivers_7_output2;
reg [13:0] drivers_5_drivers_7_output3;
reg [13:0] drivers_5_drivers_7_output0;
reg [13:0] drivers_5_drivers_7_output1;
reg [23:0] drivers_5_drivers_7_dphase1;
reg [23:0] drivers_5_drivers_7_dphase2;
reg [23:0] drivers_5_drivers_7_dphase3;
reg [23:0] drivers_5_drivers_7_w3_phase_counter;
reg [23:0] drivers_5_drivers_7_w2_phase_counter;
reg [23:0] drivers_5_drivers_7_w1_phase_counter;
reg [23:0] drivers_5_drivers_7_w0_phase_counter;
wire [7:0] drivers_5_drivers_5_a;
wire [3:0] drivers_5_drivers_5_q;
wire [7:0] drivers_5_drivers_5_b;
wire [3:0] drivers_5_drivers_5_pb_a;
wire [3:0] drivers_5_drivers_5_pb_q;
wire [3:0] drivers_5_drivers_5_pb_b;
reg [3:0] drivers_5_drivers_5_pb_nibble1_q;
reg [3:0] drivers_5_drivers_5_pb_nibble1_r;
reg [3:0] drivers_5_drivers_5_pb_nibble0_q;
reg [3:0] drivers_5_drivers_5_pb_nibble0_r;
wire [3:0] drivers_5_drivers_5_pa_a;
wire [3:0] drivers_5_drivers_5_pa_q;
wire [3:0] drivers_5_drivers_5_pa_b;
reg [3:0] drivers_5_drivers_5_pa_nibble1_q;
reg [3:0] drivers_5_drivers_5_pa_nibble1_r;
reg [3:0] drivers_5_drivers_5_pa_nibble0_q;
reg [3:0] drivers_5_drivers_5_pa_nibble0_r;
wire [3:0] drivers_5_drivers_3_a;
wire [3:0] drivers_5_drivers_3_q;
wire [3:0] drivers_5_drivers_3_b;
reg [3:0] drivers_5_drivers_3_nibble1_q;
reg [3:0] drivers_5_drivers_3_nibble1_r;
reg [3:0] drivers_5_drivers_3_nibble0_q;
reg [3:0] drivers_5_drivers_3_nibble0_r;
wire [7:0] drivers_5_drivers_2_a;
wire [3:0] drivers_5_drivers_2_q;
wire [7:0] drivers_5_drivers_2_b;
wire [3:0] drivers_5_drivers_2_pb_a;
wire [3:0] drivers_5_drivers_2_pb_q;
wire [3:0] drivers_5_drivers_2_pb_b;
reg [3:0] drivers_5_drivers_2_pb_nibble1_q;
reg [3:0] drivers_5_drivers_2_pb_nibble1_r;
reg [3:0] drivers_5_drivers_2_pb_nibble0_q;
reg [3:0] drivers_5_drivers_2_pb_nibble0_r;
wire [3:0] drivers_5_drivers_2_pa_a;
wire [3:0] drivers_5_drivers_2_pa_q;
wire [3:0] drivers_5_drivers_2_pa_b;
reg [3:0] drivers_5_drivers_2_pa_nibble1_q;
reg [3:0] drivers_5_drivers_2_pa_nibble1_r;
reg [3:0] drivers_5_drivers_2_pa_nibble0_q;
reg [3:0] drivers_5_drivers_2_pa_nibble0_r;
wire [15:0] drivers_5_drivers_1_a;
wire [3:0] drivers_5_drivers_1_q;
wire [7:0] drivers_5_drivers_1_b;
wire [3:0] drivers_5_drivers_1_pb_a;
wire [3:0] drivers_5_drivers_1_pb_q;
wire [3:0] drivers_5_drivers_1_pb_b;
reg [3:0] drivers_5_drivers_1_pb_nibble1_q;
reg [3:0] drivers_5_drivers_1_pb_nibble1_r;
reg [3:0] drivers_5_drivers_1_pb_nibble0_q;
reg [3:0] drivers_5_drivers_1_pb_nibble0_r;
wire [7:0] drivers_5_drivers_1_pa_a;
wire [3:0] drivers_5_drivers_1_pa_q;
wire [7:0] drivers_5_drivers_1_pa_b;
wire [3:0] drivers_5_drivers_1_pa_pb_a;
wire [3:0] drivers_5_drivers_1_pa_pb_q;
wire [3:0] drivers_5_drivers_1_pa_pb_b;
reg [3:0] drivers_5_drivers_1_pa_pb_nibble1_q;
reg [3:0] drivers_5_drivers_1_pa_pb_nibble1_r;
reg [3:0] drivers_5_drivers_1_pa_pb_nibble0_q;
reg [3:0] drivers_5_drivers_1_pa_pb_nibble0_r;
wire [3:0] drivers_5_drivers_1_pa_pa_a;
wire [3:0] drivers_5_drivers_1_pa_pa_q;
wire [3:0] drivers_5_drivers_1_pa_pa_b;
reg [3:0] drivers_5_drivers_1_pa_pa_nibble1_q;
reg [3:0] drivers_5_drivers_1_pa_pa_nibble1_r;
reg [3:0] drivers_5_drivers_1_pa_pa_nibble0_q;
reg [3:0] drivers_5_drivers_1_pa_pa_nibble0_r;
wire [3:0] drivers_4_a;
wire [3:0] drivers_4_c;
wire drivers_4_chorusing;
wire [3:0] drivers_4_d;
wire [3:0] drivers_4_decay;
wire [15:0] drivers_4_envelope;
wire [3:0] drivers_4__release;
wire [23:0] drivers_4_dphase;
wire [3:0] drivers_4_attack;
wire [7:0] drivers_4_controls;
reg [13:0] drivers_4_middle;
wire [3:0] drivers_4_b;
wire [3:0] drivers_4_sustain;
wire drivers_4_keydown;
reg [13:0] drivers_4_amplitude;
wire [13:0] drivers_4_threshold;
wire [1:0] drivers_4_select;
wire [35:0] drivers_4_drivers_9_ab;
reg [5:0] drivers_4_drivers_8_lcount;
reg [35:0] drivers_4_drivers_8_q;
reg [1:0] drivers_4_drivers_8_state;
reg [35:0] drivers_4_drivers_8_dq;
reg drivers_4_drivers_8_sign_bit;
reg [15:0] drivers_4_drivers_7_noise_register;
reg [13:0] drivers_4_drivers_7_output2;
reg [13:0] drivers_4_drivers_7_output3;
reg [13:0] drivers_4_drivers_7_output0;
reg [13:0] drivers_4_drivers_7_output1;
reg [23:0] drivers_4_drivers_7_dphase1;
reg [23:0] drivers_4_drivers_7_dphase2;
reg [23:0] drivers_4_drivers_7_dphase3;
reg [23:0] drivers_4_drivers_7_w3_phase_counter;
reg [23:0] drivers_4_drivers_7_w2_phase_counter;
reg [23:0] drivers_4_drivers_7_w1_phase_counter;
reg [23:0] drivers_4_drivers_7_w0_phase_counter;
wire [7:0] drivers_4_drivers_5_a;
wire [3:0] drivers_4_drivers_5_q;
wire [7:0] drivers_4_drivers_5_b;
wire [3:0] drivers_4_drivers_5_pb_a;
wire [3:0] drivers_4_drivers_5_pb_q;
wire [3:0] drivers_4_drivers_5_pb_b;
reg [3:0] drivers_4_drivers_5_pb_nibble1_q;
reg [3:0] drivers_4_drivers_5_pb_nibble1_r;
reg [3:0] drivers_4_drivers_5_pb_nibble0_q;
reg [3:0] drivers_4_drivers_5_pb_nibble0_r;
wire [3:0] drivers_4_drivers_5_pa_a;
wire [3:0] drivers_4_drivers_5_pa_q;
wire [3:0] drivers_4_drivers_5_pa_b;
reg [3:0] drivers_4_drivers_5_pa_nibble1_q;
reg [3:0] drivers_4_drivers_5_pa_nibble1_r;
reg [3:0] drivers_4_drivers_5_pa_nibble0_q;
reg [3:0] drivers_4_drivers_5_pa_nibble0_r;
wire [3:0] drivers_4_drivers_3_a;
wire [3:0] drivers_4_drivers_3_q;
wire [3:0] drivers_4_drivers_3_b;
reg [3:0] drivers_4_drivers_3_nibble1_q;
reg [3:0] drivers_4_drivers_3_nibble1_r;
reg [3:0] drivers_4_drivers_3_nibble0_q;
reg [3:0] drivers_4_drivers_3_nibble0_r;
wire [7:0] drivers_4_drivers_2_a;
wire [3:0] drivers_4_drivers_2_q;
wire [7:0] drivers_4_drivers_2_b;
wire [3:0] drivers_4_drivers_2_pb_a;
wire [3:0] drivers_4_drivers_2_pb_q;
wire [3:0] drivers_4_drivers_2_pb_b;
reg [3:0] drivers_4_drivers_2_pb_nibble1_q;
reg [3:0] drivers_4_drivers_2_pb_nibble1_r;
reg [3:0] drivers_4_drivers_2_pb_nibble0_q;
reg [3:0] drivers_4_drivers_2_pb_nibble0_r;
wire [3:0] drivers_4_drivers_2_pa_a;
wire [3:0] drivers_4_drivers_2_pa_q;
wire [3:0] drivers_4_drivers_2_pa_b;
reg [3:0] drivers_4_drivers_2_pa_nibble1_q;
reg [3:0] drivers_4_drivers_2_pa_nibble1_r;
reg [3:0] drivers_4_drivers_2_pa_nibble0_q;
reg [3:0] drivers_4_drivers_2_pa_nibble0_r;
wire [15:0] drivers_4_drivers_1_a;
wire [3:0] drivers_4_drivers_1_q;
wire [7:0] drivers_4_drivers_1_b;
wire [3:0] drivers_4_drivers_1_pb_a;
wire [3:0] drivers_4_drivers_1_pb_q;
wire [3:0] drivers_4_drivers_1_pb_b;
reg [3:0] drivers_4_drivers_1_pb_nibble1_q;
reg [3:0] drivers_4_drivers_1_pb_nibble1_r;
reg [3:0] drivers_4_drivers_1_pb_nibble0_q;
reg [3:0] drivers_4_drivers_1_pb_nibble0_r;
wire [7:0] drivers_4_drivers_1_pa_a;
wire [3:0] drivers_4_drivers_1_pa_q;
wire [7:0] drivers_4_drivers_1_pa_b;
wire [3:0] drivers_4_drivers_1_pa_pb_a;
wire [3:0] drivers_4_drivers_1_pa_pb_q;
wire [3:0] drivers_4_drivers_1_pa_pb_b;
reg [3:0] drivers_4_drivers_1_pa_pb_nibble1_q;
reg [3:0] drivers_4_drivers_1_pa_pb_nibble1_r;
reg [3:0] drivers_4_drivers_1_pa_pb_nibble0_q;
reg [3:0] drivers_4_drivers_1_pa_pb_nibble0_r;
wire [3:0] drivers_4_drivers_1_pa_pa_a;
wire [3:0] drivers_4_drivers_1_pa_pa_q;
wire [3:0] drivers_4_drivers_1_pa_pa_b;
reg [3:0] drivers_4_drivers_1_pa_pa_nibble1_q;
reg [3:0] drivers_4_drivers_1_pa_pa_nibble1_r;
reg [3:0] drivers_4_drivers_1_pa_pa_nibble0_q;
reg [3:0] drivers_4_drivers_1_pa_pa_nibble0_r;
wire [13:0] dsig_interp_result;
reg [17:0] dsig_vc_estimate;
reg [35:0] dsig_sum_of_products;
reg [22:0] dsig__interp_interp_step;
reg dsig__interp_direction;
reg [22:0] dsig__interp_interp_data;
reg [4:0] dsig__interp_rm_counter;
reg [13:0] dsig__interp_delay_1;
reg dsig__interp_rm_tick;





always @(posedge clk) begin: FPGA_SYNTH_AUDIO_SAMPLE_RATE
    if ((audio_counter >= (800 - 1))) begin
        audio_counter <= 0;
        audio_tick <= 1'b1;
    end
    else begin
        audio_counter <= (audio_counter + 1);
        audio_tick <= 1'b0;
    end
end


always @(posedge clk) begin: FPGA_SYNTH_PARAM_SAMPLE_RATE
    if ((param_counter >= (640000 - 1))) begin
        param_counter <= 0;
        param_tick <= 1'b1;
    end
    else begin
        param_counter <= (param_counter + 1);
        param_tick <= 1'b0;
    end
end


always @(posedge param_tick, posedge audio_ack) begin: FPGA_SYNTH_DRIVERS_2
    if (audio_ack) begin
        areq_bit <= 1'b0;
    end
    else if (param_tick) begin
        areq_bit <= 1'b1;
    end
end



assign audio_req = areq_bit;



assign a = drivers_4_d;



assign drivers_4_drivers_1_pa_a = ((drivers_4_drivers_1_pa_pa_a << 4) | drivers_4_drivers_1_pa_pa_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_1_PA_PA_NIBBLE0_F
    drivers_4_drivers_1_pa_pa_nibble0_q <= param_data;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_1_PA_PA_NIBBLE0_G
    drivers_4_drivers_1_pa_pa_nibble0_r <= drivers_4_drivers_1_pa_pa_nibble0_q;
end



assign drivers_4_drivers_1_pa_pa_q = drivers_4_drivers_1_pa_pa_nibble0_q;
assign drivers_4_drivers_1_pa_pa_a = drivers_4_drivers_1_pa_pa_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_1_PA_PA_NIBBLE1_F
    drivers_4_drivers_1_pa_pa_nibble1_q <= drivers_4_drivers_1_pa_pa_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_1_PA_PA_NIBBLE1_G
    drivers_4_drivers_1_pa_pa_nibble1_r <= drivers_4_drivers_1_pa_pa_nibble1_q;
end



assign drivers_4_drivers_1_pa_q = drivers_4_drivers_1_pa_pa_nibble1_q;
assign drivers_4_drivers_1_pa_pa_b = drivers_4_drivers_1_pa_pa_nibble1_r;



assign drivers_4_drivers_1_pa_b = ((drivers_4_drivers_1_pa_pb_a << 4) | drivers_4_drivers_1_pa_pb_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_1_PA_PB_NIBBLE0_F
    drivers_4_drivers_1_pa_pb_nibble0_q <= drivers_4_drivers_1_pa_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_1_PA_PB_NIBBLE0_G
    drivers_4_drivers_1_pa_pb_nibble0_r <= drivers_4_drivers_1_pa_pb_nibble0_q;
end



assign drivers_4_drivers_1_pa_pb_q = drivers_4_drivers_1_pa_pb_nibble0_q;
assign drivers_4_drivers_1_pa_pb_a = drivers_4_drivers_1_pa_pb_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_1_PA_PB_NIBBLE1_F
    drivers_4_drivers_1_pa_pb_nibble1_q <= drivers_4_drivers_1_pa_pb_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_1_PA_PB_NIBBLE1_G
    drivers_4_drivers_1_pa_pb_nibble1_r <= drivers_4_drivers_1_pa_pb_nibble1_q;
end



assign drivers_4_drivers_1_q = drivers_4_drivers_1_pa_pb_nibble1_q;
assign drivers_4_drivers_1_pa_pb_b = drivers_4_drivers_1_pa_pb_nibble1_r;



assign drivers_4_drivers_1_a = (((drivers_4_drivers_1_pa_a << 8) | drivers_4_drivers_1_pa_b) & ((1 << 16) - 1));



assign drivers_4_drivers_1_b = ((drivers_4_drivers_1_pb_a << 4) | drivers_4_drivers_1_pb_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_1_PB_NIBBLE0_F
    drivers_4_drivers_1_pb_nibble0_q <= drivers_4_drivers_1_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_1_PB_NIBBLE0_G
    drivers_4_drivers_1_pb_nibble0_r <= drivers_4_drivers_1_pb_nibble0_q;
end



assign drivers_4_drivers_1_pb_q = drivers_4_drivers_1_pb_nibble0_q;
assign drivers_4_drivers_1_pb_a = drivers_4_drivers_1_pb_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_1_PB_NIBBLE1_F
    drivers_4_drivers_1_pb_nibble1_q <= drivers_4_drivers_1_pb_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_1_PB_NIBBLE1_G
    drivers_4_drivers_1_pb_nibble1_r <= drivers_4_drivers_1_pb_nibble1_q;
end



assign drivers_4_a = drivers_4_drivers_1_pb_nibble1_q;
assign drivers_4_drivers_1_pb_b = drivers_4_drivers_1_pb_nibble1_r;



assign drivers_4_dphase = ((drivers_4_drivers_1_a << 8) | drivers_4_drivers_1_b);



assign drivers_4_drivers_2_a = ((drivers_4_drivers_2_pa_a << 4) | drivers_4_drivers_2_pa_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_2_PA_NIBBLE0_F
    drivers_4_drivers_2_pa_nibble0_q <= drivers_4_a;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_2_PA_NIBBLE0_G
    drivers_4_drivers_2_pa_nibble0_r <= drivers_4_drivers_2_pa_nibble0_q;
end



assign drivers_4_drivers_2_pa_q = drivers_4_drivers_2_pa_nibble0_q;
assign drivers_4_drivers_2_pa_a = drivers_4_drivers_2_pa_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_2_PA_NIBBLE1_F
    drivers_4_drivers_2_pa_nibble1_q <= drivers_4_drivers_2_pa_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_2_PA_NIBBLE1_G
    drivers_4_drivers_2_pa_nibble1_r <= drivers_4_drivers_2_pa_nibble1_q;
end



assign drivers_4_drivers_2_q = drivers_4_drivers_2_pa_nibble1_q;
assign drivers_4_drivers_2_pa_b = drivers_4_drivers_2_pa_nibble1_r;



assign drivers_4_drivers_2_b = ((drivers_4_drivers_2_pb_a << 4) | drivers_4_drivers_2_pb_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_2_PB_NIBBLE0_F
    drivers_4_drivers_2_pb_nibble0_q <= drivers_4_drivers_2_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_2_PB_NIBBLE0_G
    drivers_4_drivers_2_pb_nibble0_r <= drivers_4_drivers_2_pb_nibble0_q;
end



assign drivers_4_drivers_2_pb_q = drivers_4_drivers_2_pb_nibble0_q;
assign drivers_4_drivers_2_pb_a = drivers_4_drivers_2_pb_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_2_PB_NIBBLE1_F
    drivers_4_drivers_2_pb_nibble1_q <= drivers_4_drivers_2_pb_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_2_PB_NIBBLE1_G
    drivers_4_drivers_2_pb_nibble1_r <= drivers_4_drivers_2_pb_nibble1_q;
end



assign drivers_4_b = drivers_4_drivers_2_pb_nibble1_q;
assign drivers_4_drivers_2_pb_b = drivers_4_drivers_2_pb_nibble1_r;



assign drivers_4_threshold = (((drivers_4_drivers_2_a << 8) | drivers_4_drivers_2_b) & ((1 << 14) - 1));



assign drivers_4_controls = ((drivers_4_drivers_3_a << 4) | drivers_4_drivers_3_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_3_NIBBLE0_F
    drivers_4_drivers_3_nibble0_q <= drivers_4_b;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_3_NIBBLE0_G
    drivers_4_drivers_3_nibble0_r <= drivers_4_drivers_3_nibble0_q;
end



assign drivers_4_drivers_3_q = drivers_4_drivers_3_nibble0_q;
assign drivers_4_drivers_3_a = drivers_4_drivers_3_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_3_NIBBLE1_F
    drivers_4_drivers_3_nibble1_q <= drivers_4_drivers_3_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_3_NIBBLE1_G
    drivers_4_drivers_3_nibble1_r <= drivers_4_drivers_3_nibble1_q;
end



assign drivers_4_c = drivers_4_drivers_3_nibble1_q;
assign drivers_4_drivers_3_b = drivers_4_drivers_3_nibble1_r;



assign drivers_4_keydown = ((drivers_4_controls >>> 0) & ((1 << 1) - 1));



assign drivers_4_select = ((drivers_4_controls >>> 1) & ((1 << 2) - 1));



assign drivers_4_chorusing = ((drivers_4_controls >>> 3) & ((1 << 1) - 1));



assign drivers_4_drivers_5_a = ((drivers_4_drivers_5_pa_a << 4) | drivers_4_drivers_5_pa_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_5_PA_NIBBLE0_F
    drivers_4_drivers_5_pa_nibble0_q <= drivers_4_c;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_5_PA_NIBBLE0_G
    drivers_4_drivers_5_pa_nibble0_r <= drivers_4_drivers_5_pa_nibble0_q;
end



assign drivers_4_drivers_5_pa_q = drivers_4_drivers_5_pa_nibble0_q;
assign drivers_4_drivers_5_pa_a = drivers_4_drivers_5_pa_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_5_PA_NIBBLE1_F
    drivers_4_drivers_5_pa_nibble1_q <= drivers_4_drivers_5_pa_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_5_PA_NIBBLE1_G
    drivers_4_drivers_5_pa_nibble1_r <= drivers_4_drivers_5_pa_nibble1_q;
end



assign drivers_4_drivers_5_q = drivers_4_drivers_5_pa_nibble1_q;
assign drivers_4_drivers_5_pa_b = drivers_4_drivers_5_pa_nibble1_r;



assign drivers_4_drivers_5_b = ((drivers_4_drivers_5_pb_a << 4) | drivers_4_drivers_5_pb_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_5_PB_NIBBLE0_F
    drivers_4_drivers_5_pb_nibble0_q <= drivers_4_drivers_5_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_5_PB_NIBBLE0_G
    drivers_4_drivers_5_pb_nibble0_r <= drivers_4_drivers_5_pb_nibble0_q;
end



assign drivers_4_drivers_5_pb_q = drivers_4_drivers_5_pb_nibble0_q;
assign drivers_4_drivers_5_pb_a = drivers_4_drivers_5_pb_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_5_PB_NIBBLE1_F
    drivers_4_drivers_5_pb_nibble1_q <= drivers_4_drivers_5_pb_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_5_PB_NIBBLE1_G
    drivers_4_drivers_5_pb_nibble1_r <= drivers_4_drivers_5_pb_nibble1_q;
end



assign drivers_4_d = drivers_4_drivers_5_pb_nibble1_q;
assign drivers_4_drivers_5_pb_b = drivers_4_drivers_5_pb_nibble1_r;



assign drivers_4_envelope = (((drivers_4_drivers_5_a << 8) | drivers_4_drivers_5_b) & ((1 << 16) - 1));



assign drivers_4_attack = ((drivers_4_envelope >>> 0) & ((1 << 4) - 1));



assign drivers_4_decay = ((drivers_4_envelope >>> 4) & ((1 << 4) - 1));



assign drivers_4_sustain = ((drivers_4_envelope >>> 8) & ((1 << 4) - 1));



assign drivers_4__release = ((drivers_4_envelope >>> 12) & ((1 << 4) - 1));


always @(posedge audio_tick) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_7_W0_WAVEFORMS
    if (((drivers_4_drivers_7_w0_phase_counter + drivers_4_dphase) >= (1 << 24))) begin
        drivers_4_drivers_7_w0_phase_counter <= ((drivers_4_drivers_7_w0_phase_counter + drivers_4_dphase) - (1 << 24));
    end
    else begin
        drivers_4_drivers_7_w0_phase_counter <= (drivers_4_drivers_7_w0_phase_counter + drivers_4_dphase);
    end
    case (drivers_4_select)
        'h0: begin
            drivers_4_drivers_7_output0 <= (drivers_4_drivers_7_w0_phase_counter >>> 10);
        end
        'h1: begin
            if ((drivers_4_drivers_7_w0_phase_counter < (1 << (24 - 1)))) begin
                drivers_4_drivers_7_output0 <= (drivers_4_drivers_7_w0_phase_counter >>> 9);
            end
            else begin
                drivers_4_drivers_7_output0 <= ((((1 << 24) - 1) - drivers_4_drivers_7_w0_phase_counter) >>> 9);
            end
        end
        'h2: begin
            if ((drivers_4_drivers_7_w0_phase_counter > (drivers_4_threshold << (24 - 14)))) begin
                drivers_4_drivers_7_output0 <= ((1 << 14) - 1);
            end
            else begin
                drivers_4_drivers_7_output0 <= 0;
            end
        end
    endcase
end


always @(posedge audio_tick) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_7_W1_WAVEFORMS
    if (((drivers_4_drivers_7_w1_phase_counter + drivers_4_drivers_7_dphase1) >= (1 << 24))) begin
        drivers_4_drivers_7_w1_phase_counter <= ((drivers_4_drivers_7_w1_phase_counter + drivers_4_drivers_7_dphase1) - (1 << 24));
    end
    else begin
        drivers_4_drivers_7_w1_phase_counter <= (drivers_4_drivers_7_w1_phase_counter + drivers_4_drivers_7_dphase1);
    end
    case (drivers_4_select)
        'h0: begin
            drivers_4_drivers_7_output1 <= (drivers_4_drivers_7_w1_phase_counter >>> 10);
        end
        'h1: begin
            if ((drivers_4_drivers_7_w1_phase_counter < (1 << (24 - 1)))) begin
                drivers_4_drivers_7_output1 <= (drivers_4_drivers_7_w1_phase_counter >>> 9);
            end
            else begin
                drivers_4_drivers_7_output1 <= ((((1 << 24) - 1) - drivers_4_drivers_7_w1_phase_counter) >>> 9);
            end
        end
        'h2: begin
            if ((drivers_4_drivers_7_w1_phase_counter > (drivers_4_threshold << (24 - 14)))) begin
                drivers_4_drivers_7_output1 <= ((1 << 14) - 1);
            end
            else begin
                drivers_4_drivers_7_output1 <= 0;
            end
        end
    endcase
end


always @(posedge audio_tick) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_7_W2_WAVEFORMS
    if (((drivers_4_drivers_7_w2_phase_counter + drivers_4_drivers_7_dphase2) >= (1 << 24))) begin
        drivers_4_drivers_7_w2_phase_counter <= ((drivers_4_drivers_7_w2_phase_counter + drivers_4_drivers_7_dphase2) - (1 << 24));
    end
    else begin
        drivers_4_drivers_7_w2_phase_counter <= (drivers_4_drivers_7_w2_phase_counter + drivers_4_drivers_7_dphase2);
    end
    case (drivers_4_select)
        'h0: begin
            drivers_4_drivers_7_output2 <= (drivers_4_drivers_7_w2_phase_counter >>> 10);
        end
        'h1: begin
            if ((drivers_4_drivers_7_w2_phase_counter < (1 << (24 - 1)))) begin
                drivers_4_drivers_7_output2 <= (drivers_4_drivers_7_w2_phase_counter >>> 9);
            end
            else begin
                drivers_4_drivers_7_output2 <= ((((1 << 24) - 1) - drivers_4_drivers_7_w2_phase_counter) >>> 9);
            end
        end
        'h2: begin
            if ((drivers_4_drivers_7_w2_phase_counter > (drivers_4_threshold << (24 - 14)))) begin
                drivers_4_drivers_7_output2 <= ((1 << 14) - 1);
            end
            else begin
                drivers_4_drivers_7_output2 <= 0;
            end
        end
    endcase
end


always @(posedge audio_tick) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_7_W3_WAVEFORMS
    if (((drivers_4_drivers_7_w3_phase_counter + drivers_4_drivers_7_dphase3) >= (1 << 24))) begin
        drivers_4_drivers_7_w3_phase_counter <= ((drivers_4_drivers_7_w3_phase_counter + drivers_4_drivers_7_dphase3) - (1 << 24));
    end
    else begin
        drivers_4_drivers_7_w3_phase_counter <= (drivers_4_drivers_7_w3_phase_counter + drivers_4_drivers_7_dphase3);
    end
    case (drivers_4_select)
        'h0: begin
            drivers_4_drivers_7_output3 <= (drivers_4_drivers_7_w3_phase_counter >>> 10);
        end
        'h1: begin
            if ((drivers_4_drivers_7_w3_phase_counter < (1 << (24 - 1)))) begin
                drivers_4_drivers_7_output3 <= (drivers_4_drivers_7_w3_phase_counter >>> 9);
            end
            else begin
                drivers_4_drivers_7_output3 <= ((((1 << 24) - 1) - drivers_4_drivers_7_w3_phase_counter) >>> 9);
            end
        end
        'h2: begin
            if ((drivers_4_drivers_7_w3_phase_counter > (drivers_4_threshold << (24 - 14)))) begin
                drivers_4_drivers_7_output3 <= ((1 << 14) - 1);
            end
            else begin
                drivers_4_drivers_7_output3 <= 0;
            end
        end
    endcase
end


always @(drivers_4_drivers_7_noise_register, drivers_4_chorusing, drivers_4_drivers_7_output2, drivers_4_drivers_7_output3, drivers_4_drivers_7_output0, drivers_4_drivers_7_output1, drivers_4_dphase, drivers_4_select) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_7_OUTPUT_SELECTOR
    drivers_4_drivers_7_dphase1 = (drivers_4_dphase - (drivers_4_dphase >>> 10));
    drivers_4_drivers_7_dphase2 = (drivers_4_dphase + (drivers_4_dphase >>> 10));
    drivers_4_drivers_7_dphase3 = (drivers_4_dphase + (drivers_4_dphase >>> 11));
    if ((drivers_4_select == 3)) begin
        drivers_4_middle = (drivers_4_drivers_7_noise_register >>> 2);
    end
    else if (drivers_4_chorusing) begin
        drivers_4_middle = ((((drivers_4_drivers_7_output0 + drivers_4_drivers_7_output1) + drivers_4_drivers_7_output2) + drivers_4_drivers_7_output3) >>> 2);
    end
    else begin
        drivers_4_middle = drivers_4_drivers_7_output0;
    end
end


always @(posedge audio_tick) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_7_NOISE_SOURCE
    if ((drivers_4_drivers_7_noise_register == 0)) begin
        drivers_4_drivers_7_noise_register <= 123;
    end
    else if (((((drivers_4_drivers_7_noise_register ^ (drivers_4_drivers_7_noise_register >>> 2)) ^ (drivers_4_drivers_7_noise_register >>> 3)) ^ (drivers_4_drivers_7_noise_register >>> 5)) & 1)) begin
        drivers_4_drivers_7_noise_register <= ((1 << 15) + (drivers_4_drivers_7_noise_register >>> 1));
    end
    else begin
        drivers_4_drivers_7_noise_register <= (drivers_4_drivers_7_noise_register >>> 1);
    end
end


always @(posedge audio_tick) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_8_SYNCHRONOUS_STUFF
    integer x;
    if (drivers_4_drivers_8_sign_bit) begin
        if (((drivers_4_drivers_8_q - drivers_4_drivers_8_dq) < 0)) begin
            drivers_4_drivers_8_q <= 0;
        end
        else begin
            drivers_4_drivers_8_q <= (drivers_4_drivers_8_q - drivers_4_drivers_8_dq);
        end
    end
    else begin
        drivers_4_drivers_8_q <= (drivers_4_drivers_8_q + drivers_4_drivers_8_dq);
    end
    case (drivers_4_drivers_8_state)
        'h0: begin
            if (drivers_4_keydown) begin
                drivers_4_drivers_8_state <= 1;
                drivers_4_drivers_8_sign_bit <= 1'b0;
                x = ((2 << (14 + 20)) - drivers_4_drivers_8_q);
                if ((drivers_4_attack & 1)) begin
                    drivers_4_drivers_8_dq <= (($signed(x >>> 1) + $signed(x >>> 3)) + $signed(x >>> 4));
                end
                else begin
                    drivers_4_drivers_8_dq <= x;
                end
                drivers_4_drivers_8_dq <= (drivers_4_drivers_8_dq >>> ((6 + 3) + (drivers_4_attack >>> 1)));
                drivers_4_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else if ((drivers_4_drivers_8_lcount == 0)) begin
                if ((drivers_4__release & 1)) begin
                    drivers_4_drivers_8_dq <= (((drivers_4_drivers_8_q >>> 1) + (drivers_4_drivers_8_q >>> 3)) + (drivers_4_drivers_8_q >>> 4));
                end
                else begin
                    drivers_4_drivers_8_dq <= drivers_4_drivers_8_q;
                end
                drivers_4_drivers_8_dq <= (drivers_4_drivers_8_dq >>> ((6 + 3) + (drivers_4__release >>> 1)));
                drivers_4_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else begin
                drivers_4_drivers_8_lcount <= (drivers_4_drivers_8_lcount - 1);
            end
        end
        'h1: begin
            if ((!drivers_4_keydown)) begin
                drivers_4_drivers_8_state <= 0;
                drivers_4_drivers_8_sign_bit <= 1'b1;
                if ((drivers_4__release & 1)) begin
                    drivers_4_drivers_8_dq <= (((drivers_4_drivers_8_q >>> 1) + (drivers_4_drivers_8_q >>> 3)) + (drivers_4_drivers_8_q >>> 4));
                end
                else begin
                    drivers_4_drivers_8_dq <= drivers_4_drivers_8_q;
                end
                drivers_4_drivers_8_dq <= (drivers_4_drivers_8_dq >>> ((6 + 3) + (drivers_4__release >>> 1)));
                drivers_4_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else if ((drivers_4_drivers_8_q >= (16384 << 20))) begin
                drivers_4_drivers_8_state <= 2;
                drivers_4_drivers_8_sign_bit <= 1'b1;
                x = (drivers_4_drivers_8_q - (drivers_4_sustain << ((14 + 20) - 4)));
                if ((drivers_4_decay & 1)) begin
                    drivers_4_drivers_8_dq <= (($signed(x >>> 1) + $signed(x >>> 3)) + $signed(x >>> 4));
                end
                else begin
                    drivers_4_drivers_8_dq <= x;
                end
                drivers_4_drivers_8_dq <= (drivers_4_drivers_8_dq >>> ((6 + 3) + (drivers_4_decay >>> 1)));
                drivers_4_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else if ((drivers_4_drivers_8_lcount == 0)) begin
                x = ((2 << (14 + 20)) - drivers_4_drivers_8_q);
                if ((drivers_4_attack & 1)) begin
                    drivers_4_drivers_8_dq <= (($signed(x >>> 1) + $signed(x >>> 3)) + $signed(x >>> 4));
                end
                else begin
                    drivers_4_drivers_8_dq <= x;
                end
                drivers_4_drivers_8_dq <= (drivers_4_drivers_8_dq >>> ((6 + 3) + (drivers_4_attack >>> 1)));
                drivers_4_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else begin
                drivers_4_drivers_8_lcount <= (drivers_4_drivers_8_lcount - 1);
            end
        end
        'h2: begin
            if ((!drivers_4_keydown)) begin
                drivers_4_drivers_8_state <= 0;
                drivers_4_drivers_8_sign_bit <= 1'b1;
                if ((drivers_4__release & 1)) begin
                    drivers_4_drivers_8_dq <= (((drivers_4_drivers_8_q >>> 1) + (drivers_4_drivers_8_q >>> 3)) + (drivers_4_drivers_8_q >>> 4));
                end
                else begin
                    drivers_4_drivers_8_dq <= drivers_4_drivers_8_q;
                end
                drivers_4_drivers_8_dq <= (drivers_4_drivers_8_dq >>> ((6 + 3) + (drivers_4__release >>> 1)));
                drivers_4_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else if ((drivers_4_drivers_8_lcount == 0)) begin
                drivers_4_drivers_8_sign_bit <= 1'b1;
                x = (drivers_4_drivers_8_q - (drivers_4_sustain << ((14 + 20) - 4)));
                if ((drivers_4_decay & 1)) begin
                    drivers_4_drivers_8_dq <= (($signed(x >>> 1) + $signed(x >>> 3)) + $signed(x >>> 4));
                end
                else begin
                    drivers_4_drivers_8_dq <= x;
                end
                drivers_4_drivers_8_dq <= (drivers_4_drivers_8_dq >>> ((6 + 3) + (drivers_4_decay >>> 1)));
                drivers_4_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else begin
                drivers_4_drivers_8_lcount <= (drivers_4_drivers_8_lcount - 1);
            end
        end
        default: begin
            drivers_4_drivers_8_state <= 0;
            drivers_4_drivers_8_sign_bit <= 1'b0;
            drivers_4_drivers_8_dq <= 0;
            drivers_4_drivers_8_lcount <= ((1 << 6) - 1);
        end
    endcase
end


always @(drivers_4_drivers_8_q) begin: FPGA_SYNTH_DRIVERS_4_DRIVERS_8_COMBINATORIAL
    if (((drivers_4_drivers_8_q >>> 20) >= 16384)) begin
        drivers_4_amplitude = (16384 - 1);
    end
    else begin
        drivers_4_amplitude = (drivers_4_drivers_8_q >>> 20);
    end
end



assign drivers_4_drivers_9_ab = ((8192 << 14) + ((drivers_4_middle - 8192) * drivers_4_amplitude));



assign out1 = ((drivers_4_drivers_9_ab >>> 14) & 16383);



assign b = drivers_5_d;



assign drivers_5_drivers_1_pa_a = ((drivers_5_drivers_1_pa_pa_a << 4) | drivers_5_drivers_1_pa_pa_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_1_PA_PA_NIBBLE0_F
    drivers_5_drivers_1_pa_pa_nibble0_q <= a;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_1_PA_PA_NIBBLE0_G
    drivers_5_drivers_1_pa_pa_nibble0_r <= drivers_5_drivers_1_pa_pa_nibble0_q;
end



assign drivers_5_drivers_1_pa_pa_q = drivers_5_drivers_1_pa_pa_nibble0_q;
assign drivers_5_drivers_1_pa_pa_a = drivers_5_drivers_1_pa_pa_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_1_PA_PA_NIBBLE1_F
    drivers_5_drivers_1_pa_pa_nibble1_q <= drivers_5_drivers_1_pa_pa_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_1_PA_PA_NIBBLE1_G
    drivers_5_drivers_1_pa_pa_nibble1_r <= drivers_5_drivers_1_pa_pa_nibble1_q;
end



assign drivers_5_drivers_1_pa_q = drivers_5_drivers_1_pa_pa_nibble1_q;
assign drivers_5_drivers_1_pa_pa_b = drivers_5_drivers_1_pa_pa_nibble1_r;



assign drivers_5_drivers_1_pa_b = ((drivers_5_drivers_1_pa_pb_a << 4) | drivers_5_drivers_1_pa_pb_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_1_PA_PB_NIBBLE0_F
    drivers_5_drivers_1_pa_pb_nibble0_q <= drivers_5_drivers_1_pa_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_1_PA_PB_NIBBLE0_G
    drivers_5_drivers_1_pa_pb_nibble0_r <= drivers_5_drivers_1_pa_pb_nibble0_q;
end



assign drivers_5_drivers_1_pa_pb_q = drivers_5_drivers_1_pa_pb_nibble0_q;
assign drivers_5_drivers_1_pa_pb_a = drivers_5_drivers_1_pa_pb_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_1_PA_PB_NIBBLE1_F
    drivers_5_drivers_1_pa_pb_nibble1_q <= drivers_5_drivers_1_pa_pb_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_1_PA_PB_NIBBLE1_G
    drivers_5_drivers_1_pa_pb_nibble1_r <= drivers_5_drivers_1_pa_pb_nibble1_q;
end



assign drivers_5_drivers_1_q = drivers_5_drivers_1_pa_pb_nibble1_q;
assign drivers_5_drivers_1_pa_pb_b = drivers_5_drivers_1_pa_pb_nibble1_r;



assign drivers_5_drivers_1_a = (((drivers_5_drivers_1_pa_a << 8) | drivers_5_drivers_1_pa_b) & ((1 << 16) - 1));



assign drivers_5_drivers_1_b = ((drivers_5_drivers_1_pb_a << 4) | drivers_5_drivers_1_pb_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_1_PB_NIBBLE0_F
    drivers_5_drivers_1_pb_nibble0_q <= drivers_5_drivers_1_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_1_PB_NIBBLE0_G
    drivers_5_drivers_1_pb_nibble0_r <= drivers_5_drivers_1_pb_nibble0_q;
end



assign drivers_5_drivers_1_pb_q = drivers_5_drivers_1_pb_nibble0_q;
assign drivers_5_drivers_1_pb_a = drivers_5_drivers_1_pb_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_1_PB_NIBBLE1_F
    drivers_5_drivers_1_pb_nibble1_q <= drivers_5_drivers_1_pb_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_1_PB_NIBBLE1_G
    drivers_5_drivers_1_pb_nibble1_r <= drivers_5_drivers_1_pb_nibble1_q;
end



assign drivers_5_a = drivers_5_drivers_1_pb_nibble1_q;
assign drivers_5_drivers_1_pb_b = drivers_5_drivers_1_pb_nibble1_r;



assign drivers_5_dphase = ((drivers_5_drivers_1_a << 8) | drivers_5_drivers_1_b);



assign drivers_5_drivers_2_a = ((drivers_5_drivers_2_pa_a << 4) | drivers_5_drivers_2_pa_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_2_PA_NIBBLE0_F
    drivers_5_drivers_2_pa_nibble0_q <= drivers_5_a;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_2_PA_NIBBLE0_G
    drivers_5_drivers_2_pa_nibble0_r <= drivers_5_drivers_2_pa_nibble0_q;
end



assign drivers_5_drivers_2_pa_q = drivers_5_drivers_2_pa_nibble0_q;
assign drivers_5_drivers_2_pa_a = drivers_5_drivers_2_pa_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_2_PA_NIBBLE1_F
    drivers_5_drivers_2_pa_nibble1_q <= drivers_5_drivers_2_pa_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_2_PA_NIBBLE1_G
    drivers_5_drivers_2_pa_nibble1_r <= drivers_5_drivers_2_pa_nibble1_q;
end



assign drivers_5_drivers_2_q = drivers_5_drivers_2_pa_nibble1_q;
assign drivers_5_drivers_2_pa_b = drivers_5_drivers_2_pa_nibble1_r;



assign drivers_5_drivers_2_b = ((drivers_5_drivers_2_pb_a << 4) | drivers_5_drivers_2_pb_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_2_PB_NIBBLE0_F
    drivers_5_drivers_2_pb_nibble0_q <= drivers_5_drivers_2_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_2_PB_NIBBLE0_G
    drivers_5_drivers_2_pb_nibble0_r <= drivers_5_drivers_2_pb_nibble0_q;
end



assign drivers_5_drivers_2_pb_q = drivers_5_drivers_2_pb_nibble0_q;
assign drivers_5_drivers_2_pb_a = drivers_5_drivers_2_pb_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_2_PB_NIBBLE1_F
    drivers_5_drivers_2_pb_nibble1_q <= drivers_5_drivers_2_pb_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_2_PB_NIBBLE1_G
    drivers_5_drivers_2_pb_nibble1_r <= drivers_5_drivers_2_pb_nibble1_q;
end



assign drivers_5_b = drivers_5_drivers_2_pb_nibble1_q;
assign drivers_5_drivers_2_pb_b = drivers_5_drivers_2_pb_nibble1_r;



assign drivers_5_threshold = (((drivers_5_drivers_2_a << 8) | drivers_5_drivers_2_b) & ((1 << 14) - 1));



assign drivers_5_controls = ((drivers_5_drivers_3_a << 4) | drivers_5_drivers_3_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_3_NIBBLE0_F
    drivers_5_drivers_3_nibble0_q <= drivers_5_b;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_3_NIBBLE0_G
    drivers_5_drivers_3_nibble0_r <= drivers_5_drivers_3_nibble0_q;
end



assign drivers_5_drivers_3_q = drivers_5_drivers_3_nibble0_q;
assign drivers_5_drivers_3_a = drivers_5_drivers_3_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_3_NIBBLE1_F
    drivers_5_drivers_3_nibble1_q <= drivers_5_drivers_3_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_3_NIBBLE1_G
    drivers_5_drivers_3_nibble1_r <= drivers_5_drivers_3_nibble1_q;
end



assign drivers_5_c = drivers_5_drivers_3_nibble1_q;
assign drivers_5_drivers_3_b = drivers_5_drivers_3_nibble1_r;



assign drivers_5_keydown = ((drivers_5_controls >>> 0) & ((1 << 1) - 1));



assign drivers_5_select = ((drivers_5_controls >>> 1) & ((1 << 2) - 1));



assign drivers_5_chorusing = ((drivers_5_controls >>> 3) & ((1 << 1) - 1));



assign drivers_5_drivers_5_a = ((drivers_5_drivers_5_pa_a << 4) | drivers_5_drivers_5_pa_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_5_PA_NIBBLE0_F
    drivers_5_drivers_5_pa_nibble0_q <= drivers_5_c;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_5_PA_NIBBLE0_G
    drivers_5_drivers_5_pa_nibble0_r <= drivers_5_drivers_5_pa_nibble0_q;
end



assign drivers_5_drivers_5_pa_q = drivers_5_drivers_5_pa_nibble0_q;
assign drivers_5_drivers_5_pa_a = drivers_5_drivers_5_pa_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_5_PA_NIBBLE1_F
    drivers_5_drivers_5_pa_nibble1_q <= drivers_5_drivers_5_pa_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_5_PA_NIBBLE1_G
    drivers_5_drivers_5_pa_nibble1_r <= drivers_5_drivers_5_pa_nibble1_q;
end



assign drivers_5_drivers_5_q = drivers_5_drivers_5_pa_nibble1_q;
assign drivers_5_drivers_5_pa_b = drivers_5_drivers_5_pa_nibble1_r;



assign drivers_5_drivers_5_b = ((drivers_5_drivers_5_pb_a << 4) | drivers_5_drivers_5_pb_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_5_PB_NIBBLE0_F
    drivers_5_drivers_5_pb_nibble0_q <= drivers_5_drivers_5_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_5_PB_NIBBLE0_G
    drivers_5_drivers_5_pb_nibble0_r <= drivers_5_drivers_5_pb_nibble0_q;
end



assign drivers_5_drivers_5_pb_q = drivers_5_drivers_5_pb_nibble0_q;
assign drivers_5_drivers_5_pb_a = drivers_5_drivers_5_pb_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_5_PB_NIBBLE1_F
    drivers_5_drivers_5_pb_nibble1_q <= drivers_5_drivers_5_pb_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_5_PB_NIBBLE1_G
    drivers_5_drivers_5_pb_nibble1_r <= drivers_5_drivers_5_pb_nibble1_q;
end



assign drivers_5_d = drivers_5_drivers_5_pb_nibble1_q;
assign drivers_5_drivers_5_pb_b = drivers_5_drivers_5_pb_nibble1_r;



assign drivers_5_envelope = (((drivers_5_drivers_5_a << 8) | drivers_5_drivers_5_b) & ((1 << 16) - 1));



assign drivers_5_attack = ((drivers_5_envelope >>> 0) & ((1 << 4) - 1));



assign drivers_5_decay = ((drivers_5_envelope >>> 4) & ((1 << 4) - 1));



assign drivers_5_sustain = ((drivers_5_envelope >>> 8) & ((1 << 4) - 1));



assign drivers_5__release = ((drivers_5_envelope >>> 12) & ((1 << 4) - 1));


always @(posedge audio_tick) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_7_W0_WAVEFORMS
    if (((drivers_5_drivers_7_w0_phase_counter + drivers_5_dphase) >= (1 << 24))) begin
        drivers_5_drivers_7_w0_phase_counter <= ((drivers_5_drivers_7_w0_phase_counter + drivers_5_dphase) - (1 << 24));
    end
    else begin
        drivers_5_drivers_7_w0_phase_counter <= (drivers_5_drivers_7_w0_phase_counter + drivers_5_dphase);
    end
    case (drivers_5_select)
        'h0: begin
            drivers_5_drivers_7_output0 <= (drivers_5_drivers_7_w0_phase_counter >>> 10);
        end
        'h1: begin
            if ((drivers_5_drivers_7_w0_phase_counter < (1 << (24 - 1)))) begin
                drivers_5_drivers_7_output0 <= (drivers_5_drivers_7_w0_phase_counter >>> 9);
            end
            else begin
                drivers_5_drivers_7_output0 <= ((((1 << 24) - 1) - drivers_5_drivers_7_w0_phase_counter) >>> 9);
            end
        end
        'h2: begin
            if ((drivers_5_drivers_7_w0_phase_counter > (drivers_5_threshold << (24 - 14)))) begin
                drivers_5_drivers_7_output0 <= ((1 << 14) - 1);
            end
            else begin
                drivers_5_drivers_7_output0 <= 0;
            end
        end
    endcase
end


always @(posedge audio_tick) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_7_W1_WAVEFORMS
    if (((drivers_5_drivers_7_w1_phase_counter + drivers_5_drivers_7_dphase1) >= (1 << 24))) begin
        drivers_5_drivers_7_w1_phase_counter <= ((drivers_5_drivers_7_w1_phase_counter + drivers_5_drivers_7_dphase1) - (1 << 24));
    end
    else begin
        drivers_5_drivers_7_w1_phase_counter <= (drivers_5_drivers_7_w1_phase_counter + drivers_5_drivers_7_dphase1);
    end
    case (drivers_5_select)
        'h0: begin
            drivers_5_drivers_7_output1 <= (drivers_5_drivers_7_w1_phase_counter >>> 10);
        end
        'h1: begin
            if ((drivers_5_drivers_7_w1_phase_counter < (1 << (24 - 1)))) begin
                drivers_5_drivers_7_output1 <= (drivers_5_drivers_7_w1_phase_counter >>> 9);
            end
            else begin
                drivers_5_drivers_7_output1 <= ((((1 << 24) - 1) - drivers_5_drivers_7_w1_phase_counter) >>> 9);
            end
        end
        'h2: begin
            if ((drivers_5_drivers_7_w1_phase_counter > (drivers_5_threshold << (24 - 14)))) begin
                drivers_5_drivers_7_output1 <= ((1 << 14) - 1);
            end
            else begin
                drivers_5_drivers_7_output1 <= 0;
            end
        end
    endcase
end


always @(posedge audio_tick) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_7_W2_WAVEFORMS
    if (((drivers_5_drivers_7_w2_phase_counter + drivers_5_drivers_7_dphase2) >= (1 << 24))) begin
        drivers_5_drivers_7_w2_phase_counter <= ((drivers_5_drivers_7_w2_phase_counter + drivers_5_drivers_7_dphase2) - (1 << 24));
    end
    else begin
        drivers_5_drivers_7_w2_phase_counter <= (drivers_5_drivers_7_w2_phase_counter + drivers_5_drivers_7_dphase2);
    end
    case (drivers_5_select)
        'h0: begin
            drivers_5_drivers_7_output2 <= (drivers_5_drivers_7_w2_phase_counter >>> 10);
        end
        'h1: begin
            if ((drivers_5_drivers_7_w2_phase_counter < (1 << (24 - 1)))) begin
                drivers_5_drivers_7_output2 <= (drivers_5_drivers_7_w2_phase_counter >>> 9);
            end
            else begin
                drivers_5_drivers_7_output2 <= ((((1 << 24) - 1) - drivers_5_drivers_7_w2_phase_counter) >>> 9);
            end
        end
        'h2: begin
            if ((drivers_5_drivers_7_w2_phase_counter > (drivers_5_threshold << (24 - 14)))) begin
                drivers_5_drivers_7_output2 <= ((1 << 14) - 1);
            end
            else begin
                drivers_5_drivers_7_output2 <= 0;
            end
        end
    endcase
end


always @(posedge audio_tick) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_7_W3_WAVEFORMS
    if (((drivers_5_drivers_7_w3_phase_counter + drivers_5_drivers_7_dphase3) >= (1 << 24))) begin
        drivers_5_drivers_7_w3_phase_counter <= ((drivers_5_drivers_7_w3_phase_counter + drivers_5_drivers_7_dphase3) - (1 << 24));
    end
    else begin
        drivers_5_drivers_7_w3_phase_counter <= (drivers_5_drivers_7_w3_phase_counter + drivers_5_drivers_7_dphase3);
    end
    case (drivers_5_select)
        'h0: begin
            drivers_5_drivers_7_output3 <= (drivers_5_drivers_7_w3_phase_counter >>> 10);
        end
        'h1: begin
            if ((drivers_5_drivers_7_w3_phase_counter < (1 << (24 - 1)))) begin
                drivers_5_drivers_7_output3 <= (drivers_5_drivers_7_w3_phase_counter >>> 9);
            end
            else begin
                drivers_5_drivers_7_output3 <= ((((1 << 24) - 1) - drivers_5_drivers_7_w3_phase_counter) >>> 9);
            end
        end
        'h2: begin
            if ((drivers_5_drivers_7_w3_phase_counter > (drivers_5_threshold << (24 - 14)))) begin
                drivers_5_drivers_7_output3 <= ((1 << 14) - 1);
            end
            else begin
                drivers_5_drivers_7_output3 <= 0;
            end
        end
    endcase
end


always @(drivers_5_drivers_7_noise_register, drivers_5_chorusing, drivers_5_drivers_7_output2, drivers_5_drivers_7_output3, drivers_5_drivers_7_output0, drivers_5_drivers_7_output1, drivers_5_dphase, drivers_5_select) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_7_OUTPUT_SELECTOR
    drivers_5_drivers_7_dphase1 = (drivers_5_dphase - (drivers_5_dphase >>> 10));
    drivers_5_drivers_7_dphase2 = (drivers_5_dphase + (drivers_5_dphase >>> 10));
    drivers_5_drivers_7_dphase3 = (drivers_5_dphase + (drivers_5_dphase >>> 11));
    if ((drivers_5_select == 3)) begin
        drivers_5_middle = (drivers_5_drivers_7_noise_register >>> 2);
    end
    else if (drivers_5_chorusing) begin
        drivers_5_middle = ((((drivers_5_drivers_7_output0 + drivers_5_drivers_7_output1) + drivers_5_drivers_7_output2) + drivers_5_drivers_7_output3) >>> 2);
    end
    else begin
        drivers_5_middle = drivers_5_drivers_7_output0;
    end
end


always @(posedge audio_tick) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_7_NOISE_SOURCE
    if ((drivers_5_drivers_7_noise_register == 0)) begin
        drivers_5_drivers_7_noise_register <= 123;
    end
    else if (((((drivers_5_drivers_7_noise_register ^ (drivers_5_drivers_7_noise_register >>> 2)) ^ (drivers_5_drivers_7_noise_register >>> 3)) ^ (drivers_5_drivers_7_noise_register >>> 5)) & 1)) begin
        drivers_5_drivers_7_noise_register <= ((1 << 15) + (drivers_5_drivers_7_noise_register >>> 1));
    end
    else begin
        drivers_5_drivers_7_noise_register <= (drivers_5_drivers_7_noise_register >>> 1);
    end
end


always @(posedge audio_tick) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_8_SYNCHRONOUS_STUFF
    integer x;
    if (drivers_5_drivers_8_sign_bit) begin
        if (((drivers_5_drivers_8_q - drivers_5_drivers_8_dq) < 0)) begin
            drivers_5_drivers_8_q <= 0;
        end
        else begin
            drivers_5_drivers_8_q <= (drivers_5_drivers_8_q - drivers_5_drivers_8_dq);
        end
    end
    else begin
        drivers_5_drivers_8_q <= (drivers_5_drivers_8_q + drivers_5_drivers_8_dq);
    end
    case (drivers_5_drivers_8_state)
        'h0: begin
            if (drivers_5_keydown) begin
                drivers_5_drivers_8_state <= 1;
                drivers_5_drivers_8_sign_bit <= 1'b0;
                x = ((2 << (14 + 20)) - drivers_5_drivers_8_q);
                if ((drivers_5_attack & 1)) begin
                    drivers_5_drivers_8_dq <= (($signed(x >>> 1) + $signed(x >>> 3)) + $signed(x >>> 4));
                end
                else begin
                    drivers_5_drivers_8_dq <= x;
                end
                drivers_5_drivers_8_dq <= (drivers_5_drivers_8_dq >>> ((6 + 3) + (drivers_5_attack >>> 1)));
                drivers_5_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else if ((drivers_5_drivers_8_lcount == 0)) begin
                if ((drivers_5__release & 1)) begin
                    drivers_5_drivers_8_dq <= (((drivers_5_drivers_8_q >>> 1) + (drivers_5_drivers_8_q >>> 3)) + (drivers_5_drivers_8_q >>> 4));
                end
                else begin
                    drivers_5_drivers_8_dq <= drivers_5_drivers_8_q;
                end
                drivers_5_drivers_8_dq <= (drivers_5_drivers_8_dq >>> ((6 + 3) + (drivers_5__release >>> 1)));
                drivers_5_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else begin
                drivers_5_drivers_8_lcount <= (drivers_5_drivers_8_lcount - 1);
            end
        end
        'h1: begin
            if ((!drivers_5_keydown)) begin
                drivers_5_drivers_8_state <= 0;
                drivers_5_drivers_8_sign_bit <= 1'b1;
                if ((drivers_5__release & 1)) begin
                    drivers_5_drivers_8_dq <= (((drivers_5_drivers_8_q >>> 1) + (drivers_5_drivers_8_q >>> 3)) + (drivers_5_drivers_8_q >>> 4));
                end
                else begin
                    drivers_5_drivers_8_dq <= drivers_5_drivers_8_q;
                end
                drivers_5_drivers_8_dq <= (drivers_5_drivers_8_dq >>> ((6 + 3) + (drivers_5__release >>> 1)));
                drivers_5_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else if ((drivers_5_drivers_8_q >= (16384 << 20))) begin
                drivers_5_drivers_8_state <= 2;
                drivers_5_drivers_8_sign_bit <= 1'b1;
                x = (drivers_5_drivers_8_q - (drivers_5_sustain << ((14 + 20) - 4)));
                if ((drivers_5_decay & 1)) begin
                    drivers_5_drivers_8_dq <= (($signed(x >>> 1) + $signed(x >>> 3)) + $signed(x >>> 4));
                end
                else begin
                    drivers_5_drivers_8_dq <= x;
                end
                drivers_5_drivers_8_dq <= (drivers_5_drivers_8_dq >>> ((6 + 3) + (drivers_5_decay >>> 1)));
                drivers_5_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else if ((drivers_5_drivers_8_lcount == 0)) begin
                x = ((2 << (14 + 20)) - drivers_5_drivers_8_q);
                if ((drivers_5_attack & 1)) begin
                    drivers_5_drivers_8_dq <= (($signed(x >>> 1) + $signed(x >>> 3)) + $signed(x >>> 4));
                end
                else begin
                    drivers_5_drivers_8_dq <= x;
                end
                drivers_5_drivers_8_dq <= (drivers_5_drivers_8_dq >>> ((6 + 3) + (drivers_5_attack >>> 1)));
                drivers_5_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else begin
                drivers_5_drivers_8_lcount <= (drivers_5_drivers_8_lcount - 1);
            end
        end
        'h2: begin
            if ((!drivers_5_keydown)) begin
                drivers_5_drivers_8_state <= 0;
                drivers_5_drivers_8_sign_bit <= 1'b1;
                if ((drivers_5__release & 1)) begin
                    drivers_5_drivers_8_dq <= (((drivers_5_drivers_8_q >>> 1) + (drivers_5_drivers_8_q >>> 3)) + (drivers_5_drivers_8_q >>> 4));
                end
                else begin
                    drivers_5_drivers_8_dq <= drivers_5_drivers_8_q;
                end
                drivers_5_drivers_8_dq <= (drivers_5_drivers_8_dq >>> ((6 + 3) + (drivers_5__release >>> 1)));
                drivers_5_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else if ((drivers_5_drivers_8_lcount == 0)) begin
                drivers_5_drivers_8_sign_bit <= 1'b1;
                x = (drivers_5_drivers_8_q - (drivers_5_sustain << ((14 + 20) - 4)));
                if ((drivers_5_decay & 1)) begin
                    drivers_5_drivers_8_dq <= (($signed(x >>> 1) + $signed(x >>> 3)) + $signed(x >>> 4));
                end
                else begin
                    drivers_5_drivers_8_dq <= x;
                end
                drivers_5_drivers_8_dq <= (drivers_5_drivers_8_dq >>> ((6 + 3) + (drivers_5_decay >>> 1)));
                drivers_5_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else begin
                drivers_5_drivers_8_lcount <= (drivers_5_drivers_8_lcount - 1);
            end
        end
        default: begin
            drivers_5_drivers_8_state <= 0;
            drivers_5_drivers_8_sign_bit <= 1'b0;
            drivers_5_drivers_8_dq <= 0;
            drivers_5_drivers_8_lcount <= ((1 << 6) - 1);
        end
    endcase
end


always @(drivers_5_drivers_8_q) begin: FPGA_SYNTH_DRIVERS_5_DRIVERS_8_COMBINATORIAL
    if (((drivers_5_drivers_8_q >>> 20) >= 16384)) begin
        drivers_5_amplitude = (16384 - 1);
    end
    else begin
        drivers_5_amplitude = (drivers_5_drivers_8_q >>> 20);
    end
end



assign drivers_5_drivers_9_ab = ((8192 << 14) + ((drivers_5_middle - 8192) * drivers_5_amplitude));



assign out2 = ((drivers_5_drivers_9_ab >>> 14) & 16383);



assign c = drivers_6_d;



assign drivers_6_drivers_1_pa_a = ((drivers_6_drivers_1_pa_pa_a << 4) | drivers_6_drivers_1_pa_pa_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_1_PA_PA_NIBBLE0_F
    drivers_6_drivers_1_pa_pa_nibble0_q <= b;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_1_PA_PA_NIBBLE0_G
    drivers_6_drivers_1_pa_pa_nibble0_r <= drivers_6_drivers_1_pa_pa_nibble0_q;
end



assign drivers_6_drivers_1_pa_pa_q = drivers_6_drivers_1_pa_pa_nibble0_q;
assign drivers_6_drivers_1_pa_pa_a = drivers_6_drivers_1_pa_pa_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_1_PA_PA_NIBBLE1_F
    drivers_6_drivers_1_pa_pa_nibble1_q <= drivers_6_drivers_1_pa_pa_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_1_PA_PA_NIBBLE1_G
    drivers_6_drivers_1_pa_pa_nibble1_r <= drivers_6_drivers_1_pa_pa_nibble1_q;
end



assign drivers_6_drivers_1_pa_q = drivers_6_drivers_1_pa_pa_nibble1_q;
assign drivers_6_drivers_1_pa_pa_b = drivers_6_drivers_1_pa_pa_nibble1_r;



assign drivers_6_drivers_1_pa_b = ((drivers_6_drivers_1_pa_pb_a << 4) | drivers_6_drivers_1_pa_pb_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_1_PA_PB_NIBBLE0_F
    drivers_6_drivers_1_pa_pb_nibble0_q <= drivers_6_drivers_1_pa_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_1_PA_PB_NIBBLE0_G
    drivers_6_drivers_1_pa_pb_nibble0_r <= drivers_6_drivers_1_pa_pb_nibble0_q;
end



assign drivers_6_drivers_1_pa_pb_q = drivers_6_drivers_1_pa_pb_nibble0_q;
assign drivers_6_drivers_1_pa_pb_a = drivers_6_drivers_1_pa_pb_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_1_PA_PB_NIBBLE1_F
    drivers_6_drivers_1_pa_pb_nibble1_q <= drivers_6_drivers_1_pa_pb_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_1_PA_PB_NIBBLE1_G
    drivers_6_drivers_1_pa_pb_nibble1_r <= drivers_6_drivers_1_pa_pb_nibble1_q;
end



assign drivers_6_drivers_1_q = drivers_6_drivers_1_pa_pb_nibble1_q;
assign drivers_6_drivers_1_pa_pb_b = drivers_6_drivers_1_pa_pb_nibble1_r;



assign drivers_6_drivers_1_a = (((drivers_6_drivers_1_pa_a << 8) | drivers_6_drivers_1_pa_b) & ((1 << 16) - 1));



assign drivers_6_drivers_1_b = ((drivers_6_drivers_1_pb_a << 4) | drivers_6_drivers_1_pb_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_1_PB_NIBBLE0_F
    drivers_6_drivers_1_pb_nibble0_q <= drivers_6_drivers_1_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_1_PB_NIBBLE0_G
    drivers_6_drivers_1_pb_nibble0_r <= drivers_6_drivers_1_pb_nibble0_q;
end



assign drivers_6_drivers_1_pb_q = drivers_6_drivers_1_pb_nibble0_q;
assign drivers_6_drivers_1_pb_a = drivers_6_drivers_1_pb_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_1_PB_NIBBLE1_F
    drivers_6_drivers_1_pb_nibble1_q <= drivers_6_drivers_1_pb_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_1_PB_NIBBLE1_G
    drivers_6_drivers_1_pb_nibble1_r <= drivers_6_drivers_1_pb_nibble1_q;
end



assign drivers_6_a = drivers_6_drivers_1_pb_nibble1_q;
assign drivers_6_drivers_1_pb_b = drivers_6_drivers_1_pb_nibble1_r;



assign drivers_6_dphase = ((drivers_6_drivers_1_a << 8) | drivers_6_drivers_1_b);



assign drivers_6_drivers_2_a = ((drivers_6_drivers_2_pa_a << 4) | drivers_6_drivers_2_pa_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_2_PA_NIBBLE0_F
    drivers_6_drivers_2_pa_nibble0_q <= drivers_6_a;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_2_PA_NIBBLE0_G
    drivers_6_drivers_2_pa_nibble0_r <= drivers_6_drivers_2_pa_nibble0_q;
end



assign drivers_6_drivers_2_pa_q = drivers_6_drivers_2_pa_nibble0_q;
assign drivers_6_drivers_2_pa_a = drivers_6_drivers_2_pa_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_2_PA_NIBBLE1_F
    drivers_6_drivers_2_pa_nibble1_q <= drivers_6_drivers_2_pa_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_2_PA_NIBBLE1_G
    drivers_6_drivers_2_pa_nibble1_r <= drivers_6_drivers_2_pa_nibble1_q;
end



assign drivers_6_drivers_2_q = drivers_6_drivers_2_pa_nibble1_q;
assign drivers_6_drivers_2_pa_b = drivers_6_drivers_2_pa_nibble1_r;



assign drivers_6_drivers_2_b = ((drivers_6_drivers_2_pb_a << 4) | drivers_6_drivers_2_pb_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_2_PB_NIBBLE0_F
    drivers_6_drivers_2_pb_nibble0_q <= drivers_6_drivers_2_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_2_PB_NIBBLE0_G
    drivers_6_drivers_2_pb_nibble0_r <= drivers_6_drivers_2_pb_nibble0_q;
end



assign drivers_6_drivers_2_pb_q = drivers_6_drivers_2_pb_nibble0_q;
assign drivers_6_drivers_2_pb_a = drivers_6_drivers_2_pb_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_2_PB_NIBBLE1_F
    drivers_6_drivers_2_pb_nibble1_q <= drivers_6_drivers_2_pb_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_2_PB_NIBBLE1_G
    drivers_6_drivers_2_pb_nibble1_r <= drivers_6_drivers_2_pb_nibble1_q;
end



assign drivers_6_b = drivers_6_drivers_2_pb_nibble1_q;
assign drivers_6_drivers_2_pb_b = drivers_6_drivers_2_pb_nibble1_r;



assign drivers_6_threshold = (((drivers_6_drivers_2_a << 8) | drivers_6_drivers_2_b) & ((1 << 14) - 1));



assign drivers_6_controls = ((drivers_6_drivers_3_a << 4) | drivers_6_drivers_3_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_3_NIBBLE0_F
    drivers_6_drivers_3_nibble0_q <= drivers_6_b;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_3_NIBBLE0_G
    drivers_6_drivers_3_nibble0_r <= drivers_6_drivers_3_nibble0_q;
end



assign drivers_6_drivers_3_q = drivers_6_drivers_3_nibble0_q;
assign drivers_6_drivers_3_a = drivers_6_drivers_3_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_3_NIBBLE1_F
    drivers_6_drivers_3_nibble1_q <= drivers_6_drivers_3_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_3_NIBBLE1_G
    drivers_6_drivers_3_nibble1_r <= drivers_6_drivers_3_nibble1_q;
end



assign drivers_6_c = drivers_6_drivers_3_nibble1_q;
assign drivers_6_drivers_3_b = drivers_6_drivers_3_nibble1_r;



assign drivers_6_keydown = ((drivers_6_controls >>> 0) & ((1 << 1) - 1));



assign drivers_6_select = ((drivers_6_controls >>> 1) & ((1 << 2) - 1));



assign drivers_6_chorusing = ((drivers_6_controls >>> 3) & ((1 << 1) - 1));



assign drivers_6_drivers_5_a = ((drivers_6_drivers_5_pa_a << 4) | drivers_6_drivers_5_pa_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_5_PA_NIBBLE0_F
    drivers_6_drivers_5_pa_nibble0_q <= drivers_6_c;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_5_PA_NIBBLE0_G
    drivers_6_drivers_5_pa_nibble0_r <= drivers_6_drivers_5_pa_nibble0_q;
end



assign drivers_6_drivers_5_pa_q = drivers_6_drivers_5_pa_nibble0_q;
assign drivers_6_drivers_5_pa_a = drivers_6_drivers_5_pa_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_5_PA_NIBBLE1_F
    drivers_6_drivers_5_pa_nibble1_q <= drivers_6_drivers_5_pa_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_5_PA_NIBBLE1_G
    drivers_6_drivers_5_pa_nibble1_r <= drivers_6_drivers_5_pa_nibble1_q;
end



assign drivers_6_drivers_5_q = drivers_6_drivers_5_pa_nibble1_q;
assign drivers_6_drivers_5_pa_b = drivers_6_drivers_5_pa_nibble1_r;



assign drivers_6_drivers_5_b = ((drivers_6_drivers_5_pb_a << 4) | drivers_6_drivers_5_pb_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_5_PB_NIBBLE0_F
    drivers_6_drivers_5_pb_nibble0_q <= drivers_6_drivers_5_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_5_PB_NIBBLE0_G
    drivers_6_drivers_5_pb_nibble0_r <= drivers_6_drivers_5_pb_nibble0_q;
end



assign drivers_6_drivers_5_pb_q = drivers_6_drivers_5_pb_nibble0_q;
assign drivers_6_drivers_5_pb_a = drivers_6_drivers_5_pb_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_5_PB_NIBBLE1_F
    drivers_6_drivers_5_pb_nibble1_q <= drivers_6_drivers_5_pb_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_5_PB_NIBBLE1_G
    drivers_6_drivers_5_pb_nibble1_r <= drivers_6_drivers_5_pb_nibble1_q;
end



assign drivers_6_d = drivers_6_drivers_5_pb_nibble1_q;
assign drivers_6_drivers_5_pb_b = drivers_6_drivers_5_pb_nibble1_r;



assign drivers_6_envelope = (((drivers_6_drivers_5_a << 8) | drivers_6_drivers_5_b) & ((1 << 16) - 1));



assign drivers_6_attack = ((drivers_6_envelope >>> 0) & ((1 << 4) - 1));



assign drivers_6_decay = ((drivers_6_envelope >>> 4) & ((1 << 4) - 1));



assign drivers_6_sustain = ((drivers_6_envelope >>> 8) & ((1 << 4) - 1));



assign drivers_6__release = ((drivers_6_envelope >>> 12) & ((1 << 4) - 1));


always @(posedge audio_tick) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_7_W0_WAVEFORMS
    if (((drivers_6_drivers_7_w0_phase_counter + drivers_6_dphase) >= (1 << 24))) begin
        drivers_6_drivers_7_w0_phase_counter <= ((drivers_6_drivers_7_w0_phase_counter + drivers_6_dphase) - (1 << 24));
    end
    else begin
        drivers_6_drivers_7_w0_phase_counter <= (drivers_6_drivers_7_w0_phase_counter + drivers_6_dphase);
    end
    case (drivers_6_select)
        'h0: begin
            drivers_6_drivers_7_output0 <= (drivers_6_drivers_7_w0_phase_counter >>> 10);
        end
        'h1: begin
            if ((drivers_6_drivers_7_w0_phase_counter < (1 << (24 - 1)))) begin
                drivers_6_drivers_7_output0 <= (drivers_6_drivers_7_w0_phase_counter >>> 9);
            end
            else begin
                drivers_6_drivers_7_output0 <= ((((1 << 24) - 1) - drivers_6_drivers_7_w0_phase_counter) >>> 9);
            end
        end
        'h2: begin
            if ((drivers_6_drivers_7_w0_phase_counter > (drivers_6_threshold << (24 - 14)))) begin
                drivers_6_drivers_7_output0 <= ((1 << 14) - 1);
            end
            else begin
                drivers_6_drivers_7_output0 <= 0;
            end
        end
    endcase
end


always @(posedge audio_tick) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_7_W1_WAVEFORMS
    if (((drivers_6_drivers_7_w1_phase_counter + drivers_6_drivers_7_dphase1) >= (1 << 24))) begin
        drivers_6_drivers_7_w1_phase_counter <= ((drivers_6_drivers_7_w1_phase_counter + drivers_6_drivers_7_dphase1) - (1 << 24));
    end
    else begin
        drivers_6_drivers_7_w1_phase_counter <= (drivers_6_drivers_7_w1_phase_counter + drivers_6_drivers_7_dphase1);
    end
    case (drivers_6_select)
        'h0: begin
            drivers_6_drivers_7_output1 <= (drivers_6_drivers_7_w1_phase_counter >>> 10);
        end
        'h1: begin
            if ((drivers_6_drivers_7_w1_phase_counter < (1 << (24 - 1)))) begin
                drivers_6_drivers_7_output1 <= (drivers_6_drivers_7_w1_phase_counter >>> 9);
            end
            else begin
                drivers_6_drivers_7_output1 <= ((((1 << 24) - 1) - drivers_6_drivers_7_w1_phase_counter) >>> 9);
            end
        end
        'h2: begin
            if ((drivers_6_drivers_7_w1_phase_counter > (drivers_6_threshold << (24 - 14)))) begin
                drivers_6_drivers_7_output1 <= ((1 << 14) - 1);
            end
            else begin
                drivers_6_drivers_7_output1 <= 0;
            end
        end
    endcase
end


always @(posedge audio_tick) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_7_W2_WAVEFORMS
    if (((drivers_6_drivers_7_w2_phase_counter + drivers_6_drivers_7_dphase2) >= (1 << 24))) begin
        drivers_6_drivers_7_w2_phase_counter <= ((drivers_6_drivers_7_w2_phase_counter + drivers_6_drivers_7_dphase2) - (1 << 24));
    end
    else begin
        drivers_6_drivers_7_w2_phase_counter <= (drivers_6_drivers_7_w2_phase_counter + drivers_6_drivers_7_dphase2);
    end
    case (drivers_6_select)
        'h0: begin
            drivers_6_drivers_7_output2 <= (drivers_6_drivers_7_w2_phase_counter >>> 10);
        end
        'h1: begin
            if ((drivers_6_drivers_7_w2_phase_counter < (1 << (24 - 1)))) begin
                drivers_6_drivers_7_output2 <= (drivers_6_drivers_7_w2_phase_counter >>> 9);
            end
            else begin
                drivers_6_drivers_7_output2 <= ((((1 << 24) - 1) - drivers_6_drivers_7_w2_phase_counter) >>> 9);
            end
        end
        'h2: begin
            if ((drivers_6_drivers_7_w2_phase_counter > (drivers_6_threshold << (24 - 14)))) begin
                drivers_6_drivers_7_output2 <= ((1 << 14) - 1);
            end
            else begin
                drivers_6_drivers_7_output2 <= 0;
            end
        end
    endcase
end


always @(posedge audio_tick) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_7_W3_WAVEFORMS
    if (((drivers_6_drivers_7_w3_phase_counter + drivers_6_drivers_7_dphase3) >= (1 << 24))) begin
        drivers_6_drivers_7_w3_phase_counter <= ((drivers_6_drivers_7_w3_phase_counter + drivers_6_drivers_7_dphase3) - (1 << 24));
    end
    else begin
        drivers_6_drivers_7_w3_phase_counter <= (drivers_6_drivers_7_w3_phase_counter + drivers_6_drivers_7_dphase3);
    end
    case (drivers_6_select)
        'h0: begin
            drivers_6_drivers_7_output3 <= (drivers_6_drivers_7_w3_phase_counter >>> 10);
        end
        'h1: begin
            if ((drivers_6_drivers_7_w3_phase_counter < (1 << (24 - 1)))) begin
                drivers_6_drivers_7_output3 <= (drivers_6_drivers_7_w3_phase_counter >>> 9);
            end
            else begin
                drivers_6_drivers_7_output3 <= ((((1 << 24) - 1) - drivers_6_drivers_7_w3_phase_counter) >>> 9);
            end
        end
        'h2: begin
            if ((drivers_6_drivers_7_w3_phase_counter > (drivers_6_threshold << (24 - 14)))) begin
                drivers_6_drivers_7_output3 <= ((1 << 14) - 1);
            end
            else begin
                drivers_6_drivers_7_output3 <= 0;
            end
        end
    endcase
end


always @(drivers_6_drivers_7_noise_register, drivers_6_chorusing, drivers_6_drivers_7_output2, drivers_6_drivers_7_output3, drivers_6_drivers_7_output0, drivers_6_drivers_7_output1, drivers_6_dphase, drivers_6_select) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_7_OUTPUT_SELECTOR
    drivers_6_drivers_7_dphase1 = (drivers_6_dphase - (drivers_6_dphase >>> 10));
    drivers_6_drivers_7_dphase2 = (drivers_6_dphase + (drivers_6_dphase >>> 10));
    drivers_6_drivers_7_dphase3 = (drivers_6_dphase + (drivers_6_dphase >>> 11));
    if ((drivers_6_select == 3)) begin
        drivers_6_middle = (drivers_6_drivers_7_noise_register >>> 2);
    end
    else if (drivers_6_chorusing) begin
        drivers_6_middle = ((((drivers_6_drivers_7_output0 + drivers_6_drivers_7_output1) + drivers_6_drivers_7_output2) + drivers_6_drivers_7_output3) >>> 2);
    end
    else begin
        drivers_6_middle = drivers_6_drivers_7_output0;
    end
end


always @(posedge audio_tick) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_7_NOISE_SOURCE
    if ((drivers_6_drivers_7_noise_register == 0)) begin
        drivers_6_drivers_7_noise_register <= 123;
    end
    else if (((((drivers_6_drivers_7_noise_register ^ (drivers_6_drivers_7_noise_register >>> 2)) ^ (drivers_6_drivers_7_noise_register >>> 3)) ^ (drivers_6_drivers_7_noise_register >>> 5)) & 1)) begin
        drivers_6_drivers_7_noise_register <= ((1 << 15) + (drivers_6_drivers_7_noise_register >>> 1));
    end
    else begin
        drivers_6_drivers_7_noise_register <= (drivers_6_drivers_7_noise_register >>> 1);
    end
end


always @(posedge audio_tick) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_8_SYNCHRONOUS_STUFF
    integer x;
    if (drivers_6_drivers_8_sign_bit) begin
        if (((drivers_6_drivers_8_q - drivers_6_drivers_8_dq) < 0)) begin
            drivers_6_drivers_8_q <= 0;
        end
        else begin
            drivers_6_drivers_8_q <= (drivers_6_drivers_8_q - drivers_6_drivers_8_dq);
        end
    end
    else begin
        drivers_6_drivers_8_q <= (drivers_6_drivers_8_q + drivers_6_drivers_8_dq);
    end
    case (drivers_6_drivers_8_state)
        'h0: begin
            if (drivers_6_keydown) begin
                drivers_6_drivers_8_state <= 1;
                drivers_6_drivers_8_sign_bit <= 1'b0;
                x = ((2 << (14 + 20)) - drivers_6_drivers_8_q);
                if ((drivers_6_attack & 1)) begin
                    drivers_6_drivers_8_dq <= (($signed(x >>> 1) + $signed(x >>> 3)) + $signed(x >>> 4));
                end
                else begin
                    drivers_6_drivers_8_dq <= x;
                end
                drivers_6_drivers_8_dq <= (drivers_6_drivers_8_dq >>> ((6 + 3) + (drivers_6_attack >>> 1)));
                drivers_6_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else if ((drivers_6_drivers_8_lcount == 0)) begin
                if ((drivers_6__release & 1)) begin
                    drivers_6_drivers_8_dq <= (((drivers_6_drivers_8_q >>> 1) + (drivers_6_drivers_8_q >>> 3)) + (drivers_6_drivers_8_q >>> 4));
                end
                else begin
                    drivers_6_drivers_8_dq <= drivers_6_drivers_8_q;
                end
                drivers_6_drivers_8_dq <= (drivers_6_drivers_8_dq >>> ((6 + 3) + (drivers_6__release >>> 1)));
                drivers_6_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else begin
                drivers_6_drivers_8_lcount <= (drivers_6_drivers_8_lcount - 1);
            end
        end
        'h1: begin
            if ((!drivers_6_keydown)) begin
                drivers_6_drivers_8_state <= 0;
                drivers_6_drivers_8_sign_bit <= 1'b1;
                if ((drivers_6__release & 1)) begin
                    drivers_6_drivers_8_dq <= (((drivers_6_drivers_8_q >>> 1) + (drivers_6_drivers_8_q >>> 3)) + (drivers_6_drivers_8_q >>> 4));
                end
                else begin
                    drivers_6_drivers_8_dq <= drivers_6_drivers_8_q;
                end
                drivers_6_drivers_8_dq <= (drivers_6_drivers_8_dq >>> ((6 + 3) + (drivers_6__release >>> 1)));
                drivers_6_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else if ((drivers_6_drivers_8_q >= (16384 << 20))) begin
                drivers_6_drivers_8_state <= 2;
                drivers_6_drivers_8_sign_bit <= 1'b1;
                x = (drivers_6_drivers_8_q - (drivers_6_sustain << ((14 + 20) - 4)));
                if ((drivers_6_decay & 1)) begin
                    drivers_6_drivers_8_dq <= (($signed(x >>> 1) + $signed(x >>> 3)) + $signed(x >>> 4));
                end
                else begin
                    drivers_6_drivers_8_dq <= x;
                end
                drivers_6_drivers_8_dq <= (drivers_6_drivers_8_dq >>> ((6 + 3) + (drivers_6_decay >>> 1)));
                drivers_6_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else if ((drivers_6_drivers_8_lcount == 0)) begin
                x = ((2 << (14 + 20)) - drivers_6_drivers_8_q);
                if ((drivers_6_attack & 1)) begin
                    drivers_6_drivers_8_dq <= (($signed(x >>> 1) + $signed(x >>> 3)) + $signed(x >>> 4));
                end
                else begin
                    drivers_6_drivers_8_dq <= x;
                end
                drivers_6_drivers_8_dq <= (drivers_6_drivers_8_dq >>> ((6 + 3) + (drivers_6_attack >>> 1)));
                drivers_6_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else begin
                drivers_6_drivers_8_lcount <= (drivers_6_drivers_8_lcount - 1);
            end
        end
        'h2: begin
            if ((!drivers_6_keydown)) begin
                drivers_6_drivers_8_state <= 0;
                drivers_6_drivers_8_sign_bit <= 1'b1;
                if ((drivers_6__release & 1)) begin
                    drivers_6_drivers_8_dq <= (((drivers_6_drivers_8_q >>> 1) + (drivers_6_drivers_8_q >>> 3)) + (drivers_6_drivers_8_q >>> 4));
                end
                else begin
                    drivers_6_drivers_8_dq <= drivers_6_drivers_8_q;
                end
                drivers_6_drivers_8_dq <= (drivers_6_drivers_8_dq >>> ((6 + 3) + (drivers_6__release >>> 1)));
                drivers_6_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else if ((drivers_6_drivers_8_lcount == 0)) begin
                drivers_6_drivers_8_sign_bit <= 1'b1;
                x = (drivers_6_drivers_8_q - (drivers_6_sustain << ((14 + 20) - 4)));
                if ((drivers_6_decay & 1)) begin
                    drivers_6_drivers_8_dq <= (($signed(x >>> 1) + $signed(x >>> 3)) + $signed(x >>> 4));
                end
                else begin
                    drivers_6_drivers_8_dq <= x;
                end
                drivers_6_drivers_8_dq <= (drivers_6_drivers_8_dq >>> ((6 + 3) + (drivers_6_decay >>> 1)));
                drivers_6_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else begin
                drivers_6_drivers_8_lcount <= (drivers_6_drivers_8_lcount - 1);
            end
        end
        default: begin
            drivers_6_drivers_8_state <= 0;
            drivers_6_drivers_8_sign_bit <= 1'b0;
            drivers_6_drivers_8_dq <= 0;
            drivers_6_drivers_8_lcount <= ((1 << 6) - 1);
        end
    endcase
end


always @(drivers_6_drivers_8_q) begin: FPGA_SYNTH_DRIVERS_6_DRIVERS_8_COMBINATORIAL
    if (((drivers_6_drivers_8_q >>> 20) >= 16384)) begin
        drivers_6_amplitude = (16384 - 1);
    end
    else begin
        drivers_6_amplitude = (drivers_6_drivers_8_q >>> 20);
    end
end



assign drivers_6_drivers_9_ab = ((8192 << 14) + ((drivers_6_middle - 8192) * drivers_6_amplitude));



assign out3 = ((drivers_6_drivers_9_ab >>> 14) & 16383);



assign d = drivers_7_d;



assign drivers_7_drivers_1_pa_a = ((drivers_7_drivers_1_pa_pa_a << 4) | drivers_7_drivers_1_pa_pa_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_1_PA_PA_NIBBLE0_F
    drivers_7_drivers_1_pa_pa_nibble0_q <= c;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_1_PA_PA_NIBBLE0_G
    drivers_7_drivers_1_pa_pa_nibble0_r <= drivers_7_drivers_1_pa_pa_nibble0_q;
end



assign drivers_7_drivers_1_pa_pa_q = drivers_7_drivers_1_pa_pa_nibble0_q;
assign drivers_7_drivers_1_pa_pa_a = drivers_7_drivers_1_pa_pa_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_1_PA_PA_NIBBLE1_F
    drivers_7_drivers_1_pa_pa_nibble1_q <= drivers_7_drivers_1_pa_pa_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_1_PA_PA_NIBBLE1_G
    drivers_7_drivers_1_pa_pa_nibble1_r <= drivers_7_drivers_1_pa_pa_nibble1_q;
end



assign drivers_7_drivers_1_pa_q = drivers_7_drivers_1_pa_pa_nibble1_q;
assign drivers_7_drivers_1_pa_pa_b = drivers_7_drivers_1_pa_pa_nibble1_r;



assign drivers_7_drivers_1_pa_b = ((drivers_7_drivers_1_pa_pb_a << 4) | drivers_7_drivers_1_pa_pb_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_1_PA_PB_NIBBLE0_F
    drivers_7_drivers_1_pa_pb_nibble0_q <= drivers_7_drivers_1_pa_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_1_PA_PB_NIBBLE0_G
    drivers_7_drivers_1_pa_pb_nibble0_r <= drivers_7_drivers_1_pa_pb_nibble0_q;
end



assign drivers_7_drivers_1_pa_pb_q = drivers_7_drivers_1_pa_pb_nibble0_q;
assign drivers_7_drivers_1_pa_pb_a = drivers_7_drivers_1_pa_pb_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_1_PA_PB_NIBBLE1_F
    drivers_7_drivers_1_pa_pb_nibble1_q <= drivers_7_drivers_1_pa_pb_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_1_PA_PB_NIBBLE1_G
    drivers_7_drivers_1_pa_pb_nibble1_r <= drivers_7_drivers_1_pa_pb_nibble1_q;
end



assign drivers_7_drivers_1_q = drivers_7_drivers_1_pa_pb_nibble1_q;
assign drivers_7_drivers_1_pa_pb_b = drivers_7_drivers_1_pa_pb_nibble1_r;



assign drivers_7_drivers_1_a = (((drivers_7_drivers_1_pa_a << 8) | drivers_7_drivers_1_pa_b) & ((1 << 16) - 1));



assign drivers_7_drivers_1_b = ((drivers_7_drivers_1_pb_a << 4) | drivers_7_drivers_1_pb_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_1_PB_NIBBLE0_F
    drivers_7_drivers_1_pb_nibble0_q <= drivers_7_drivers_1_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_1_PB_NIBBLE0_G
    drivers_7_drivers_1_pb_nibble0_r <= drivers_7_drivers_1_pb_nibble0_q;
end



assign drivers_7_drivers_1_pb_q = drivers_7_drivers_1_pb_nibble0_q;
assign drivers_7_drivers_1_pb_a = drivers_7_drivers_1_pb_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_1_PB_NIBBLE1_F
    drivers_7_drivers_1_pb_nibble1_q <= drivers_7_drivers_1_pb_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_1_PB_NIBBLE1_G
    drivers_7_drivers_1_pb_nibble1_r <= drivers_7_drivers_1_pb_nibble1_q;
end



assign drivers_7_a = drivers_7_drivers_1_pb_nibble1_q;
assign drivers_7_drivers_1_pb_b = drivers_7_drivers_1_pb_nibble1_r;



assign drivers_7_dphase = ((drivers_7_drivers_1_a << 8) | drivers_7_drivers_1_b);



assign drivers_7_drivers_2_a = ((drivers_7_drivers_2_pa_a << 4) | drivers_7_drivers_2_pa_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_2_PA_NIBBLE0_F
    drivers_7_drivers_2_pa_nibble0_q <= drivers_7_a;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_2_PA_NIBBLE0_G
    drivers_7_drivers_2_pa_nibble0_r <= drivers_7_drivers_2_pa_nibble0_q;
end



assign drivers_7_drivers_2_pa_q = drivers_7_drivers_2_pa_nibble0_q;
assign drivers_7_drivers_2_pa_a = drivers_7_drivers_2_pa_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_2_PA_NIBBLE1_F
    drivers_7_drivers_2_pa_nibble1_q <= drivers_7_drivers_2_pa_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_2_PA_NIBBLE1_G
    drivers_7_drivers_2_pa_nibble1_r <= drivers_7_drivers_2_pa_nibble1_q;
end



assign drivers_7_drivers_2_q = drivers_7_drivers_2_pa_nibble1_q;
assign drivers_7_drivers_2_pa_b = drivers_7_drivers_2_pa_nibble1_r;



assign drivers_7_drivers_2_b = ((drivers_7_drivers_2_pb_a << 4) | drivers_7_drivers_2_pb_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_2_PB_NIBBLE0_F
    drivers_7_drivers_2_pb_nibble0_q <= drivers_7_drivers_2_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_2_PB_NIBBLE0_G
    drivers_7_drivers_2_pb_nibble0_r <= drivers_7_drivers_2_pb_nibble0_q;
end



assign drivers_7_drivers_2_pb_q = drivers_7_drivers_2_pb_nibble0_q;
assign drivers_7_drivers_2_pb_a = drivers_7_drivers_2_pb_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_2_PB_NIBBLE1_F
    drivers_7_drivers_2_pb_nibble1_q <= drivers_7_drivers_2_pb_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_2_PB_NIBBLE1_G
    drivers_7_drivers_2_pb_nibble1_r <= drivers_7_drivers_2_pb_nibble1_q;
end



assign drivers_7_b = drivers_7_drivers_2_pb_nibble1_q;
assign drivers_7_drivers_2_pb_b = drivers_7_drivers_2_pb_nibble1_r;



assign drivers_7_threshold = (((drivers_7_drivers_2_a << 8) | drivers_7_drivers_2_b) & ((1 << 14) - 1));



assign drivers_7_controls = ((drivers_7_drivers_3_a << 4) | drivers_7_drivers_3_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_3_NIBBLE0_F
    drivers_7_drivers_3_nibble0_q <= drivers_7_b;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_3_NIBBLE0_G
    drivers_7_drivers_3_nibble0_r <= drivers_7_drivers_3_nibble0_q;
end



assign drivers_7_drivers_3_q = drivers_7_drivers_3_nibble0_q;
assign drivers_7_drivers_3_a = drivers_7_drivers_3_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_3_NIBBLE1_F
    drivers_7_drivers_3_nibble1_q <= drivers_7_drivers_3_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_3_NIBBLE1_G
    drivers_7_drivers_3_nibble1_r <= drivers_7_drivers_3_nibble1_q;
end



assign drivers_7_c = drivers_7_drivers_3_nibble1_q;
assign drivers_7_drivers_3_b = drivers_7_drivers_3_nibble1_r;



assign drivers_7_keydown = ((drivers_7_controls >>> 0) & ((1 << 1) - 1));



assign drivers_7_select = ((drivers_7_controls >>> 1) & ((1 << 2) - 1));



assign drivers_7_chorusing = ((drivers_7_controls >>> 3) & ((1 << 1) - 1));



assign drivers_7_drivers_5_a = ((drivers_7_drivers_5_pa_a << 4) | drivers_7_drivers_5_pa_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_5_PA_NIBBLE0_F
    drivers_7_drivers_5_pa_nibble0_q <= drivers_7_c;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_5_PA_NIBBLE0_G
    drivers_7_drivers_5_pa_nibble0_r <= drivers_7_drivers_5_pa_nibble0_q;
end



assign drivers_7_drivers_5_pa_q = drivers_7_drivers_5_pa_nibble0_q;
assign drivers_7_drivers_5_pa_a = drivers_7_drivers_5_pa_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_5_PA_NIBBLE1_F
    drivers_7_drivers_5_pa_nibble1_q <= drivers_7_drivers_5_pa_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_5_PA_NIBBLE1_G
    drivers_7_drivers_5_pa_nibble1_r <= drivers_7_drivers_5_pa_nibble1_q;
end



assign drivers_7_drivers_5_q = drivers_7_drivers_5_pa_nibble1_q;
assign drivers_7_drivers_5_pa_b = drivers_7_drivers_5_pa_nibble1_r;



assign drivers_7_drivers_5_b = ((drivers_7_drivers_5_pb_a << 4) | drivers_7_drivers_5_pb_b);


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_5_PB_NIBBLE0_F
    drivers_7_drivers_5_pb_nibble0_q <= drivers_7_drivers_5_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_5_PB_NIBBLE0_G
    drivers_7_drivers_5_pb_nibble0_r <= drivers_7_drivers_5_pb_nibble0_q;
end



assign drivers_7_drivers_5_pb_q = drivers_7_drivers_5_pb_nibble0_q;
assign drivers_7_drivers_5_pb_a = drivers_7_drivers_5_pb_nibble0_r;


always @(posedge param_clk) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_5_PB_NIBBLE1_F
    drivers_7_drivers_5_pb_nibble1_q <= drivers_7_drivers_5_pb_q;
end


always @(posedge audio_req) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_5_PB_NIBBLE1_G
    drivers_7_drivers_5_pb_nibble1_r <= drivers_7_drivers_5_pb_nibble1_q;
end



assign drivers_7_d = drivers_7_drivers_5_pb_nibble1_q;
assign drivers_7_drivers_5_pb_b = drivers_7_drivers_5_pb_nibble1_r;



assign drivers_7_envelope = (((drivers_7_drivers_5_a << 8) | drivers_7_drivers_5_b) & ((1 << 16) - 1));



assign drivers_7_attack = ((drivers_7_envelope >>> 0) & ((1 << 4) - 1));



assign drivers_7_decay = ((drivers_7_envelope >>> 4) & ((1 << 4) - 1));



assign drivers_7_sustain = ((drivers_7_envelope >>> 8) & ((1 << 4) - 1));



assign drivers_7__release = ((drivers_7_envelope >>> 12) & ((1 << 4) - 1));


always @(posedge audio_tick) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_7_W0_WAVEFORMS
    if (((drivers_7_drivers_7_w0_phase_counter + drivers_7_dphase) >= (1 << 24))) begin
        drivers_7_drivers_7_w0_phase_counter <= ((drivers_7_drivers_7_w0_phase_counter + drivers_7_dphase) - (1 << 24));
    end
    else begin
        drivers_7_drivers_7_w0_phase_counter <= (drivers_7_drivers_7_w0_phase_counter + drivers_7_dphase);
    end
    case (drivers_7_select)
        'h0: begin
            drivers_7_drivers_7_output0 <= (drivers_7_drivers_7_w0_phase_counter >>> 10);
        end
        'h1: begin
            if ((drivers_7_drivers_7_w0_phase_counter < (1 << (24 - 1)))) begin
                drivers_7_drivers_7_output0 <= (drivers_7_drivers_7_w0_phase_counter >>> 9);
            end
            else begin
                drivers_7_drivers_7_output0 <= ((((1 << 24) - 1) - drivers_7_drivers_7_w0_phase_counter) >>> 9);
            end
        end
        'h2: begin
            if ((drivers_7_drivers_7_w0_phase_counter > (drivers_7_threshold << (24 - 14)))) begin
                drivers_7_drivers_7_output0 <= ((1 << 14) - 1);
            end
            else begin
                drivers_7_drivers_7_output0 <= 0;
            end
        end
    endcase
end


always @(posedge audio_tick) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_7_W1_WAVEFORMS
    if (((drivers_7_drivers_7_w1_phase_counter + drivers_7_drivers_7_dphase1) >= (1 << 24))) begin
        drivers_7_drivers_7_w1_phase_counter <= ((drivers_7_drivers_7_w1_phase_counter + drivers_7_drivers_7_dphase1) - (1 << 24));
    end
    else begin
        drivers_7_drivers_7_w1_phase_counter <= (drivers_7_drivers_7_w1_phase_counter + drivers_7_drivers_7_dphase1);
    end
    case (drivers_7_select)
        'h0: begin
            drivers_7_drivers_7_output1 <= (drivers_7_drivers_7_w1_phase_counter >>> 10);
        end
        'h1: begin
            if ((drivers_7_drivers_7_w1_phase_counter < (1 << (24 - 1)))) begin
                drivers_7_drivers_7_output1 <= (drivers_7_drivers_7_w1_phase_counter >>> 9);
            end
            else begin
                drivers_7_drivers_7_output1 <= ((((1 << 24) - 1) - drivers_7_drivers_7_w1_phase_counter) >>> 9);
            end
        end
        'h2: begin
            if ((drivers_7_drivers_7_w1_phase_counter > (drivers_7_threshold << (24 - 14)))) begin
                drivers_7_drivers_7_output1 <= ((1 << 14) - 1);
            end
            else begin
                drivers_7_drivers_7_output1 <= 0;
            end
        end
    endcase
end


always @(posedge audio_tick) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_7_W2_WAVEFORMS
    if (((drivers_7_drivers_7_w2_phase_counter + drivers_7_drivers_7_dphase2) >= (1 << 24))) begin
        drivers_7_drivers_7_w2_phase_counter <= ((drivers_7_drivers_7_w2_phase_counter + drivers_7_drivers_7_dphase2) - (1 << 24));
    end
    else begin
        drivers_7_drivers_7_w2_phase_counter <= (drivers_7_drivers_7_w2_phase_counter + drivers_7_drivers_7_dphase2);
    end
    case (drivers_7_select)
        'h0: begin
            drivers_7_drivers_7_output2 <= (drivers_7_drivers_7_w2_phase_counter >>> 10);
        end
        'h1: begin
            if ((drivers_7_drivers_7_w2_phase_counter < (1 << (24 - 1)))) begin
                drivers_7_drivers_7_output2 <= (drivers_7_drivers_7_w2_phase_counter >>> 9);
            end
            else begin
                drivers_7_drivers_7_output2 <= ((((1 << 24) - 1) - drivers_7_drivers_7_w2_phase_counter) >>> 9);
            end
        end
        'h2: begin
            if ((drivers_7_drivers_7_w2_phase_counter > (drivers_7_threshold << (24 - 14)))) begin
                drivers_7_drivers_7_output2 <= ((1 << 14) - 1);
            end
            else begin
                drivers_7_drivers_7_output2 <= 0;
            end
        end
    endcase
end


always @(posedge audio_tick) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_7_W3_WAVEFORMS
    if (((drivers_7_drivers_7_w3_phase_counter + drivers_7_drivers_7_dphase3) >= (1 << 24))) begin
        drivers_7_drivers_7_w3_phase_counter <= ((drivers_7_drivers_7_w3_phase_counter + drivers_7_drivers_7_dphase3) - (1 << 24));
    end
    else begin
        drivers_7_drivers_7_w3_phase_counter <= (drivers_7_drivers_7_w3_phase_counter + drivers_7_drivers_7_dphase3);
    end
    case (drivers_7_select)
        'h0: begin
            drivers_7_drivers_7_output3 <= (drivers_7_drivers_7_w3_phase_counter >>> 10);
        end
        'h1: begin
            if ((drivers_7_drivers_7_w3_phase_counter < (1 << (24 - 1)))) begin
                drivers_7_drivers_7_output3 <= (drivers_7_drivers_7_w3_phase_counter >>> 9);
            end
            else begin
                drivers_7_drivers_7_output3 <= ((((1 << 24) - 1) - drivers_7_drivers_7_w3_phase_counter) >>> 9);
            end
        end
        'h2: begin
            if ((drivers_7_drivers_7_w3_phase_counter > (drivers_7_threshold << (24 - 14)))) begin
                drivers_7_drivers_7_output3 <= ((1 << 14) - 1);
            end
            else begin
                drivers_7_drivers_7_output3 <= 0;
            end
        end
    endcase
end


always @(drivers_7_drivers_7_noise_register, drivers_7_chorusing, drivers_7_drivers_7_output2, drivers_7_drivers_7_output3, drivers_7_drivers_7_output0, drivers_7_drivers_7_output1, drivers_7_dphase, drivers_7_select) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_7_OUTPUT_SELECTOR
    drivers_7_drivers_7_dphase1 = (drivers_7_dphase - (drivers_7_dphase >>> 10));
    drivers_7_drivers_7_dphase2 = (drivers_7_dphase + (drivers_7_dphase >>> 10));
    drivers_7_drivers_7_dphase3 = (drivers_7_dphase + (drivers_7_dphase >>> 11));
    if ((drivers_7_select == 3)) begin
        drivers_7_middle = (drivers_7_drivers_7_noise_register >>> 2);
    end
    else if (drivers_7_chorusing) begin
        drivers_7_middle = ((((drivers_7_drivers_7_output0 + drivers_7_drivers_7_output1) + drivers_7_drivers_7_output2) + drivers_7_drivers_7_output3) >>> 2);
    end
    else begin
        drivers_7_middle = drivers_7_drivers_7_output0;
    end
end


always @(posedge audio_tick) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_7_NOISE_SOURCE
    if ((drivers_7_drivers_7_noise_register == 0)) begin
        drivers_7_drivers_7_noise_register <= 123;
    end
    else if (((((drivers_7_drivers_7_noise_register ^ (drivers_7_drivers_7_noise_register >>> 2)) ^ (drivers_7_drivers_7_noise_register >>> 3)) ^ (drivers_7_drivers_7_noise_register >>> 5)) & 1)) begin
        drivers_7_drivers_7_noise_register <= ((1 << 15) + (drivers_7_drivers_7_noise_register >>> 1));
    end
    else begin
        drivers_7_drivers_7_noise_register <= (drivers_7_drivers_7_noise_register >>> 1);
    end
end


always @(posedge audio_tick) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_8_SYNCHRONOUS_STUFF
    integer x;
    if (drivers_7_drivers_8_sign_bit) begin
        if (((drivers_7_drivers_8_q - drivers_7_drivers_8_dq) < 0)) begin
            drivers_7_drivers_8_q <= 0;
        end
        else begin
            drivers_7_drivers_8_q <= (drivers_7_drivers_8_q - drivers_7_drivers_8_dq);
        end
    end
    else begin
        drivers_7_drivers_8_q <= (drivers_7_drivers_8_q + drivers_7_drivers_8_dq);
    end
    case (drivers_7_drivers_8_state)
        'h0: begin
            if (drivers_7_keydown) begin
                drivers_7_drivers_8_state <= 1;
                drivers_7_drivers_8_sign_bit <= 1'b0;
                x = ((2 << (14 + 20)) - drivers_7_drivers_8_q);
                if ((drivers_7_attack & 1)) begin
                    drivers_7_drivers_8_dq <= (($signed(x >>> 1) + $signed(x >>> 3)) + $signed(x >>> 4));
                end
                else begin
                    drivers_7_drivers_8_dq <= x;
                end
                drivers_7_drivers_8_dq <= (drivers_7_drivers_8_dq >>> ((6 + 3) + (drivers_7_attack >>> 1)));
                drivers_7_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else if ((drivers_7_drivers_8_lcount == 0)) begin
                if ((drivers_7__release & 1)) begin
                    drivers_7_drivers_8_dq <= (((drivers_7_drivers_8_q >>> 1) + (drivers_7_drivers_8_q >>> 3)) + (drivers_7_drivers_8_q >>> 4));
                end
                else begin
                    drivers_7_drivers_8_dq <= drivers_7_drivers_8_q;
                end
                drivers_7_drivers_8_dq <= (drivers_7_drivers_8_dq >>> ((6 + 3) + (drivers_7__release >>> 1)));
                drivers_7_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else begin
                drivers_7_drivers_8_lcount <= (drivers_7_drivers_8_lcount - 1);
            end
        end
        'h1: begin
            if ((!drivers_7_keydown)) begin
                drivers_7_drivers_8_state <= 0;
                drivers_7_drivers_8_sign_bit <= 1'b1;
                if ((drivers_7__release & 1)) begin
                    drivers_7_drivers_8_dq <= (((drivers_7_drivers_8_q >>> 1) + (drivers_7_drivers_8_q >>> 3)) + (drivers_7_drivers_8_q >>> 4));
                end
                else begin
                    drivers_7_drivers_8_dq <= drivers_7_drivers_8_q;
                end
                drivers_7_drivers_8_dq <= (drivers_7_drivers_8_dq >>> ((6 + 3) + (drivers_7__release >>> 1)));
                drivers_7_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else if ((drivers_7_drivers_8_q >= (16384 << 20))) begin
                drivers_7_drivers_8_state <= 2;
                drivers_7_drivers_8_sign_bit <= 1'b1;
                x = (drivers_7_drivers_8_q - (drivers_7_sustain << ((14 + 20) - 4)));
                if ((drivers_7_decay & 1)) begin
                    drivers_7_drivers_8_dq <= (($signed(x >>> 1) + $signed(x >>> 3)) + $signed(x >>> 4));
                end
                else begin
                    drivers_7_drivers_8_dq <= x;
                end
                drivers_7_drivers_8_dq <= (drivers_7_drivers_8_dq >>> ((6 + 3) + (drivers_7_decay >>> 1)));
                drivers_7_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else if ((drivers_7_drivers_8_lcount == 0)) begin
                x = ((2 << (14 + 20)) - drivers_7_drivers_8_q);
                if ((drivers_7_attack & 1)) begin
                    drivers_7_drivers_8_dq <= (($signed(x >>> 1) + $signed(x >>> 3)) + $signed(x >>> 4));
                end
                else begin
                    drivers_7_drivers_8_dq <= x;
                end
                drivers_7_drivers_8_dq <= (drivers_7_drivers_8_dq >>> ((6 + 3) + (drivers_7_attack >>> 1)));
                drivers_7_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else begin
                drivers_7_drivers_8_lcount <= (drivers_7_drivers_8_lcount - 1);
            end
        end
        'h2: begin
            if ((!drivers_7_keydown)) begin
                drivers_7_drivers_8_state <= 0;
                drivers_7_drivers_8_sign_bit <= 1'b1;
                if ((drivers_7__release & 1)) begin
                    drivers_7_drivers_8_dq <= (((drivers_7_drivers_8_q >>> 1) + (drivers_7_drivers_8_q >>> 3)) + (drivers_7_drivers_8_q >>> 4));
                end
                else begin
                    drivers_7_drivers_8_dq <= drivers_7_drivers_8_q;
                end
                drivers_7_drivers_8_dq <= (drivers_7_drivers_8_dq >>> ((6 + 3) + (drivers_7__release >>> 1)));
                drivers_7_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else if ((drivers_7_drivers_8_lcount == 0)) begin
                drivers_7_drivers_8_sign_bit <= 1'b1;
                x = (drivers_7_drivers_8_q - (drivers_7_sustain << ((14 + 20) - 4)));
                if ((drivers_7_decay & 1)) begin
                    drivers_7_drivers_8_dq <= (($signed(x >>> 1) + $signed(x >>> 3)) + $signed(x >>> 4));
                end
                else begin
                    drivers_7_drivers_8_dq <= x;
                end
                drivers_7_drivers_8_dq <= (drivers_7_drivers_8_dq >>> ((6 + 3) + (drivers_7_decay >>> 1)));
                drivers_7_drivers_8_lcount <= ((1 << 6) - 1);
            end
            else begin
                drivers_7_drivers_8_lcount <= (drivers_7_drivers_8_lcount - 1);
            end
        end
        default: begin
            drivers_7_drivers_8_state <= 0;
            drivers_7_drivers_8_sign_bit <= 1'b0;
            drivers_7_drivers_8_dq <= 0;
            drivers_7_drivers_8_lcount <= ((1 << 6) - 1);
        end
    endcase
end


always @(drivers_7_drivers_8_q) begin: FPGA_SYNTH_DRIVERS_7_DRIVERS_8_COMBINATORIAL
    if (((drivers_7_drivers_8_q >>> 20) >= 16384)) begin
        drivers_7_amplitude = (16384 - 1);
    end
    else begin
        drivers_7_amplitude = (drivers_7_drivers_8_q >>> 20);
    end
end



assign drivers_7_drivers_9_ab = ((8192 << 14) + ((drivers_7_middle - 8192) * drivers_7_amplitude));



assign out4 = ((drivers_7_drivers_9_ab >>> 14) & 16383);



assign _output = ((((out1 + out2) + out3) + out4) >>> 2);


always @(posedge clk) begin: FPGA_SYNTH_DSIG__INTERP_DO_STUFF
    if (((dsig__interp_rm_counter == 0) || (dsig__interp_rm_counter == 3) || (dsig__interp_rm_counter == 6) || (dsig__interp_rm_counter == 9) || (dsig__interp_rm_counter == 11) || (dsig__interp_rm_counter == 14) || (dsig__interp_rm_counter == 17) || (dsig__interp_rm_counter == 20) || (dsig__interp_rm_counter == 23))) begin
        dsig__interp_rm_tick <= 1'b0;
    end
    else begin
        dsig__interp_rm_tick <= 1'b1;
    end
    if ((dsig__interp_rm_counter >= 24)) begin
        dsig__interp_rm_counter <= 0;
    end
    else begin
        dsig__interp_rm_counter <= (dsig__interp_rm_counter + 1);
    end
    if (audio_tick) begin
        dsig__interp_delay_1 <= _output;
        dsig__interp_interp_data <= (dsig__interp_delay_1 << 9);
        if ((_output > dsig__interp_delay_1)) begin
            dsig__interp_direction <= 1'b1;
            dsig__interp_interp_step <= (_output - dsig__interp_delay_1);
        end
        else begin
            dsig__interp_direction <= 1'b0;
            dsig__interp_interp_step <= (dsig__interp_delay_1 - _output);
        end
    end
    else if (dsig__interp_rm_tick) begin
        if (dsig__interp_direction) begin
            dsig__interp_interp_data <= (dsig__interp_interp_data + dsig__interp_interp_step);
        end
        else begin
            dsig__interp_interp_data <= (dsig__interp_interp_data - dsig__interp_interp_step);
        end
    end
end



assign dsig_interp_result = (dsig__interp_interp_data >>> 9);


always @(posedge clk) begin: FPGA_SYNTH_DSIG_DO_STUFF
    dac_bit <= (dsig_interp_result > (dsig_sum_of_products >>> 18));
    dsig_vc_estimate <= (dsig_sum_of_products >>> 18);
end


always @(dac_bit, dsig_vc_estimate) begin: FPGA_SYNTH_DSIG_MULTIPLY
    if (dac_bit) begin
        dsig_sum_of_products = ((818 << 14) + (261326 * dsig_vc_estimate));
    end
    else begin
        dsig_sum_of_products = (261326 * dsig_vc_estimate);
    end
end

endmodule
